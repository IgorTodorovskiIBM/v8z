// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "src/v8.h"

#include "test/cctest/cctest.h"

using namespace v8;
namespace i = v8::internal;


TEST(PerIsolateState) {
  HandleScope scope(CcTest::isolate());
  LocalContext context1(CcTest::isolate());

  Local<Value> foo = v8_str("\x66\x6f\x6f");
  context1->SetSecurityToken(foo);

  CompileRun(
      "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
      "\x76\x61\x72\x20\x63\x61\x6c\x6c\x73\x20\x3d\x20\x30\x3b"
      "\x76\x61\x72\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x72\x65\x63\x6f\x72\x64\x73\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x72\x65\x63\x6f\x72\x64\x73\x2e\x6c\x65\x6e\x67\x74\x68\x3b\x20\x63\x61\x6c\x6c\x73\x2b\x2b\x20\x7d\x3b"
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b");
  Handle<Value> observer = CompileRun("\x6f\x62\x73\x65\x72\x76\x65\x72");
  Handle<Value> obj = CompileRun("\x6f\x62\x6a");
  Handle<Value> notify_fun1 = CompileRun(
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x72\x27\x3b\x20\x7d\x29");
  Handle<Value> notify_fun2;
  {
    LocalContext context2(CcTest::isolate());
    context2->SetSecurityToken(foo);
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            obj);
    notify_fun2 = CompileRun(
        "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x7a\x27\x3b\x20\x7d\x29");
  }
  Handle<Value> notify_fun3;
  {
    LocalContext context3(CcTest::isolate());
    context3->SetSecurityToken(foo);
    context3->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            obj);
    notify_fun3 = CompileRun(
        "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x74\x27\x3b\x20\x7d\x29");
  }
  {
    LocalContext context4(CcTest::isolate());
    context4->SetSecurityToken(foo);
    context4->Global()->Set(
        String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x73\x65\x72\x76\x65\x72"), observer);
    context4->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x66\x75\x6e\x31"),
                            notify_fun1);
    context4->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x66\x75\x6e\x32"),
                            notify_fun2);
    context4->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x66\x75\x6e\x33"),
                            notify_fun3);
    CompileRun("\x66\x75\x6e\x31\x28\x29\x3b\x20\x66\x75\x6e\x32\x28\x29\x3b\x20\x66\x75\x6e\x33\x28\x29\x3b\x20\x4f\x62\x6a\x65\x63\x74\x2e\x64\x65\x6c\x69\x76\x65\x72\x43\x68\x61\x6e\x67\x65\x52\x65\x63\x6f\x72\x64\x73\x28\x6f\x62\x73\x65\x72\x76\x65\x72\x29");
  }
  CHECK_EQ(1, CompileRun("\x63\x61\x6c\x6c\x73")->Int32Value());
  CHECK_EQ(3, CompileRun("\x63\x6f\x75\x6e\x74")->Int32Value());
}


TEST(EndOfMicrotaskDelivery) {
  HandleScope scope(CcTest::isolate());
  LocalContext context(CcTest::isolate());
  CompileRun(
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
      "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
      "\x76\x61\x72\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x72\x65\x63\x6f\x72\x64\x73\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x72\x65\x63\x6f\x72\x64\x73\x2e\x6c\x65\x6e\x67\x74\x68\x20\x7d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b"
      "\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x72\x27\x3b");
  CHECK_EQ(1, CompileRun("\x63\x6f\x75\x6e\x74")->Int32Value());
}


TEST(DeliveryOrdering) {
  HandleScope scope(CcTest::isolate());
  LocalContext context(CcTest::isolate());
  CompileRun(
      "\x76\x61\x72\x20\x6f\x62\x6a\x31\x20\x3d\x20\x7b\x7d\x3b"
      "\x76\x61\x72\x20\x6f\x62\x6a\x32\x20\x3d\x20\x7b\x7d\x3b"
      "\x76\x61\x72\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x20\x3d\x20\x5b\x5d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x32\x28\x29\x20\x7b\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x32\x29\x3b\x20\x7d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x31\x28\x29\x20\x7b\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x31\x29\x3b\x20\x7d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x33\x28\x29\x20\x7b\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x33\x29\x3b\x20\x7d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x31\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x31\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x31\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x32\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x31\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x33\x29\x3b"
      "\x6f\x62\x6a\x31\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x72\x27\x3b");
  CHECK_EQ(3, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x6c\x65\x6e\x67\x74\x68")->Int32Value());
  CHECK_EQ(1, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x30\x5d")->Int32Value());
  CHECK_EQ(2, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x31\x5d")->Int32Value());
  CHECK_EQ(3, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x32\x5d")->Int32Value());
  CompileRun(
      "\x6f\x72\x64\x65\x72\x69\x6e\x67\x20\x3d\x20\x5b\x5d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x32\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x33\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x32\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x32\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x32\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x31\x29\x3b"
      "\x6f\x62\x6a\x32\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x7a\x27");
  CHECK_EQ(3, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x6c\x65\x6e\x67\x74\x68")->Int32Value());
  CHECK_EQ(1, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x30\x5d")->Int32Value());
  CHECK_EQ(2, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x31\x5d")->Int32Value());
  CHECK_EQ(3, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x32\x5d")->Int32Value());
}


TEST(DeliveryOrderingReentrant) {
  HandleScope scope(CcTest::isolate());
  LocalContext context(CcTest::isolate());
  CompileRun(
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
      "\x76\x61\x72\x20\x72\x65\x65\x6e\x74\x65\x72\x65\x64\x20\x3d\x20\x66\x61\x6c\x73\x65\x3b"
      "\x76\x61\x72\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x20\x3d\x20\x5b\x5d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x31\x28\x29\x20\x7b\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x31\x29\x3b\x20\x7d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x32\x28\x29\x20\x7b"
      "\x20\x20\x69\x66\x20\x28\x21\x72\x65\x65\x6e\x74\x65\x72\x65\x64\x29\x20\x7b"
      "\x20\x20\x20\x20\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x7a\x27\x3b"
      "\x20\x20\x20\x20\x72\x65\x65\x6e\x74\x65\x72\x65\x64\x20\x3d\x20\x74\x72\x75\x65\x3b"
      "\x20\x20\x7d"
      "\x20\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x32\x29\x3b"
      "\x7d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x33\x28\x29\x20\x7b\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x33\x29\x3b\x20\x7d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x31\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x32\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x33\x29\x3b"
      "\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x72\x27\x3b");
  CHECK_EQ(5, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x6c\x65\x6e\x67\x74\x68")->Int32Value());
  CHECK_EQ(1, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x30\x5d")->Int32Value());
  CHECK_EQ(2, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x31\x5d")->Int32Value());
  CHECK_EQ(3, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x32\x5d")->Int32Value());
  // Note that we re-deliver to observers 1 and 2, while observer3
  // already received the second record during the first round.
  CHECK_EQ(1, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x33\x5d")->Int32Value());
  CHECK_EQ(2, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x31\x5d")->Int32Value());
}


TEST(DeliveryOrderingDeliverChangeRecords) {
  HandleScope scope(CcTest::isolate());
  LocalContext context(CcTest::isolate());
  CompileRun(
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
      "\x76\x61\x72\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x20\x3d\x20\x5b\x5d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x31\x28\x29\x20\x7b\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x31\x29\x3b\x20\x69\x66\x20\x28\x21\x6f\x62\x6a\x2e\x62\x29\x20\x6f\x62\x6a\x2e\x62\x20\x3d\x20\x74\x72\x75\x65\x20\x7d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x32\x28\x29\x20\x7b\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x32\x29\x3b\x20\x7d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x31\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x32\x29\x3b"
      "\x6f\x62\x6a\x2e\x61\x20\x3d\x20\x31\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x64\x65\x6c\x69\x76\x65\x72\x43\x68\x61\x6e\x67\x65\x52\x65\x63\x6f\x72\x64\x73\x28\x6f\x62\x73\x65\x72\x76\x65\x72\x32\x29\x3b");
  CHECK_EQ(4, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x6c\x65\x6e\x67\x74\x68")->Int32Value());
  // First, observer2 is called due to deliverChangeRecords
  CHECK_EQ(2, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x30\x5d")->Int32Value());
  // Then, observer1 is called when the stack unwinds
  CHECK_EQ(1, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x31\x5d")->Int32Value());
  // observer1's mutation causes both 1 and 2 to be reactivated,
  // with 1 having priority.
  CHECK_EQ(1, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x32\x5d")->Int32Value());
  CHECK_EQ(2, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x33\x5d")->Int32Value());
}


TEST(ObjectHashTableGrowth) {
  HandleScope scope(CcTest::isolate());
  // Initializing this context sets up initial hash tables.
  LocalContext context(CcTest::isolate());
  Handle<Value> obj = CompileRun("\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b");
  Handle<Value> observer = CompileRun(
      "\x76\x61\x72\x20\x72\x61\x6e\x20\x3d\x20\x66\x61\x6c\x73\x65\x3b"
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x61\x6e\x20\x3d\x20\x74\x72\x75\x65\x20\x7d\x29");
  {
    // As does initializing this context.
    LocalContext context2(CcTest::isolate());
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            obj);
    context2->Global()->Set(
        String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x73\x65\x72\x76\x65\x72"), observer);
    CompileRun(
        "\x76\x61\x72\x20\x6f\x62\x6a\x41\x72\x72\x20\x3d\x20\x5b\x5d\x3b"
        // 100 objects should be enough to make the hash table grow
        // (and thus relocate).
        "\x66\x6f\x72\x20\x28\x76\x61\x72\x20\x69\x20\x3d\x20\x30\x3b\x20\x69\x20\x3c\x20\x31\x30\x30\x3b\x20\x2b\x2b\x69\x29\x20\x7b"
        "\x20\x20\x6f\x62\x6a\x41\x72\x72\x2e\x70\x75\x73\x68\x28\x7b\x7d\x29\x3b"
        "\x20\x20\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x41\x72\x72\x5b\x6f\x62\x6a\x41\x72\x72\x2e\x6c\x65\x6e\x67\x74\x68\x2d\x31\x5d\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x7b\x7d\x29\x3b"
        "\x7d"
        "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b");
  }
  // obj is now marked "is_observed", but our map has moved.
  CompileRun("\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x72\x27");
  CHECK(CompileRun("\x72\x61\x6e")->BooleanValue());
}


struct RecordExpectation {
  Handle<Value> object;
  const char* type;
  const char* name;
  Handle<Value> old_value;
};


// TODO(adamk): Use this helper elsewhere in this file.
static void ExpectRecords(v8::Isolate* isolate,
                          Handle<Value> records,
                          const RecordExpectation expectations[],
                          int num) {
  CHECK(records->IsArray());
  Handle<Array> recordArray = records.As<Array>();
  CHECK_EQ(num, static_cast<int>(recordArray->Length()));
  for (int i = 0; i < num; ++i) {
    Handle<Value> record = recordArray->Get(i);
    CHECK(record->IsObject());
    Handle<Object> recordObj = record.As<Object>();
    CHECK(expectations[i].object->StrictEquals(
        recordObj->Get(String::NewFromUtf8(isolate, "\x6f\x62\x6a\x65\x63\x74"))));
    CHECK(String::NewFromUtf8(isolate, expectations[i].type)->Equals(
        recordObj->Get(String::NewFromUtf8(isolate, "\x74\x79\x70\x65"))));
    if (strcmp("\x73\x70\x6c\x69\x63\x65", expectations[i].type) != 0) {
      CHECK(String::NewFromUtf8(isolate, expectations[i].name)->Equals(
          recordObj->Get(String::NewFromUtf8(isolate, "\x6e\x61\x6d\x65"))));
      if (!expectations[i].old_value.IsEmpty()) {
        CHECK(expectations[i].old_value->Equals(
            recordObj->Get(String::NewFromUtf8(isolate, "\x6f\x6c\x64\x56\x61\x6c\x75\x65"))));
      }
    }
  }
}

#define EXPECT_RECORDS(records, expectations)                \
  ExpectRecords(CcTest::isolate(), records, expectations, \
                ARRAY_SIZE(expectations))

TEST(APITestBasicMutation) {
  v8::Isolate* v8_isolate = CcTest::isolate();
  HandleScope scope(v8_isolate);
  LocalContext context(v8_isolate);
  Handle<Object> obj = Handle<Object>::Cast(CompileRun(
      "\x76\x61\x72\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x3d\x20\x5b\x5d\x3b"
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x28\x72\x29\x20\x7b\x20\x5b\x5d\x2e\x70\x75\x73\x68\x2e\x61\x70\x70\x6c\x79\x28\x72\x65\x63\x6f\x72\x64\x73\x2c\x20\x72\x29\x3b\x20\x7d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b"
      "\x6f\x62\x6a"));
  obj->Set(String::NewFromUtf8(v8_isolate, "\x66\x6f\x6f"),
           Number::New(v8_isolate, 7));
  obj->Set(1, Number::New(v8_isolate, 2));
  // ForceSet should work just as well as Set
  obj->ForceSet(String::NewFromUtf8(v8_isolate, "\x66\x6f\x6f"),
                Number::New(v8_isolate, 3));
  obj->ForceSet(Number::New(v8_isolate, 1), Number::New(v8_isolate, 4));
  // Setting an indexed element via the property setting method
  obj->Set(Number::New(v8_isolate, 1), Number::New(v8_isolate, 5));
  // Setting with a non-String, non-uint32 key
  obj->ForceSet(Number::New(v8_isolate, 1.1), Number::New(v8_isolate, 6),
                DontDelete);
  obj->Delete(String::NewFromUtf8(v8_isolate, "\x66\x6f\x6f"));
  obj->Delete(1);
  obj->ForceDelete(Number::New(v8_isolate, 1.1));

  // Force delivery
  // TODO(adamk): Should the above set methods trigger delivery themselves?
  CompileRun("\x76\x6f\x69\x64\x20\x30");
  CHECK_EQ(9, CompileRun("\x72\x65\x63\x6f\x72\x64\x73\x2e\x6c\x65\x6e\x67\x74\x68")->Int32Value());
  const RecordExpectation expected_records[] = {
    { obj, "\x61\x64\x64", "\x66\x6f\x6f", Handle<Value>() },
    { obj, "\x61\x64\x64", "\x31", Handle<Value>() },
    // Note: use 7 not 1 below, as the latter triggers a nifty VS10 compiler bug
    // where instead of 1.0, a garbage value would be passed into Number::New.
    { obj, "\x75\x70\x64\x61\x74\x65", "\x66\x6f\x6f", Number::New(v8_isolate, 7) },
    { obj, "\x75\x70\x64\x61\x74\x65", "\x31", Number::New(v8_isolate, 2) },
    { obj, "\x75\x70\x64\x61\x74\x65", "\x31", Number::New(v8_isolate, 4) },
    { obj, "\x61\x64\x64", "\x31\x2e\x31", Handle<Value>() },
    { obj, "\x64\x65\x6c\x65\x74\x65", "\x66\x6f\x6f", Number::New(v8_isolate, 3) },
    { obj, "\x64\x65\x6c\x65\x74\x65", "\x31", Number::New(v8_isolate, 5) },
    { obj, "\x64\x65\x6c\x65\x74\x65", "\x31\x2e\x31", Number::New(v8_isolate, 6) }
  };
  EXPECT_RECORDS(CompileRun("\x72\x65\x63\x6f\x72\x64\x73"), expected_records);
}


TEST(HiddenPrototypeObservation) {
  v8::Isolate* v8_isolate = CcTest::isolate();
  HandleScope scope(v8_isolate);
  LocalContext context(v8_isolate);
  Handle<FunctionTemplate> tmpl = FunctionTemplate::New(v8_isolate);
  tmpl->SetHiddenPrototype(true);
  tmpl->InstanceTemplate()->Set(
      String::NewFromUtf8(v8_isolate, "\x66\x6f\x6f"), Number::New(v8_isolate, 75));
  Handle<Object> proto = tmpl->GetFunction()->NewInstance();
  Handle<Object> obj = Object::New(v8_isolate);
  obj->SetPrototype(proto);
  context->Global()->Set(String::NewFromUtf8(v8_isolate, "\x6f\x62\x6a"), obj);
  context->Global()->Set(String::NewFromUtf8(v8_isolate, "\x70\x72\x6f\x74\x6f"),
                         proto);
  CompileRun(
      "\x76\x61\x72\x20\x72\x65\x63\x6f\x72\x64\x73\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x28\x72\x29\x20\x7b\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x3d\x20\x72\x3b\x20\x7d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b"
      "\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x34\x31\x3b"  // triggers a notification
      "\x70\x72\x6f\x74\x6f\x2e\x66\x6f\x6f\x20\x3d\x20\x34\x32\x3b");  // does not trigger a notification
  const RecordExpectation expected_records[] = {
    { obj, "\x75\x70\x64\x61\x74\x65", "\x66\x6f\x6f", Number::New(v8_isolate, 75) }
  };
  EXPECT_RECORDS(CompileRun("\x72\x65\x63\x6f\x72\x64\x73"), expected_records);
  obj->SetPrototype(Null(v8_isolate));
  CompileRun("\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x34\x33");
  const RecordExpectation expected_records2[] = {
    { obj, "\x61\x64\x64", "\x66\x6f\x6f", Handle<Value>() }
  };
  EXPECT_RECORDS(CompileRun("\x72\x65\x63\x6f\x72\x64\x73"), expected_records2);
  obj->SetPrototype(proto);
  CompileRun(
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x70\x72\x6f\x74\x6f\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b"
      "\x70\x72\x6f\x74\x6f\x2e\x62\x61\x72\x20\x3d\x20\x31\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x75\x6e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b"
      "\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x34\x34\x3b");
  const RecordExpectation expected_records3[] = {
    { proto, "\x61\x64\x64", "\x62\x61\x72", Handle<Value>() }
    // TODO(adamk): The below record should be emitted since proto is observed
    // and has been modified. Not clear if this happens in practice.
    // { proto, "update", "foo", Number::New(43) }
  };
  EXPECT_RECORDS(CompileRun("\x72\x65\x63\x6f\x72\x64\x73"), expected_records3);
}


static int NumberOfElements(i::Handle<i::JSWeakMap> map) {
  return i::ObjectHashTable::cast(map->table())->NumberOfElements();
}


TEST(ObservationWeakMap) {
  HandleScope scope(CcTest::isolate());
  LocalContext context(CcTest::isolate());
  CompileRun(
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x7b\x7d\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x67\x65\x74\x4e\x6f\x74\x69\x66\x69\x65\x72\x28\x6f\x62\x6a\x29\x3b"
      "\x6f\x62\x6a\x20\x3d\x20\x6e\x75\x6c\x6c\x3b");
  i::Isolate* i_isolate = CcTest::i_isolate();
  i::Handle<i::JSObject> observation_state =
      i_isolate->factory()->observation_state();
  i::Handle<i::JSWeakMap> callbackInfoMap =
      i::Handle<i::JSWeakMap>::cast(i::Object::GetProperty(
          i_isolate, observation_state, "\x63\x61\x6c\x6c\x62\x61\x63\x6b\x49\x6e\x66\x6f\x4d\x61\x70").ToHandleChecked());
  i::Handle<i::JSWeakMap> objectInfoMap =
      i::Handle<i::JSWeakMap>::cast(i::Object::GetProperty(
          i_isolate, observation_state, "\x6f\x62\x6a\x65\x63\x74\x49\x6e\x66\x6f\x4d\x61\x70").ToHandleChecked());
  i::Handle<i::JSWeakMap> notifierObjectInfoMap =
      i::Handle<i::JSWeakMap>::cast(i::Object::GetProperty(
          i_isolate, observation_state, "\x6e\x6f\x74\x69\x66\x69\x65\x72\x4f\x62\x6a\x65\x63\x74\x49\x6e\x66\x6f\x4d\x61\x70")
              .ToHandleChecked());
  CHECK_EQ(1, NumberOfElements(callbackInfoMap));
  CHECK_EQ(1, NumberOfElements(objectInfoMap));
  CHECK_EQ(1, NumberOfElements(notifierObjectInfoMap));
  i_isolate->heap()->CollectAllGarbage(i::Heap::kAbortIncrementalMarkingMask);
  CHECK_EQ(0, NumberOfElements(callbackInfoMap));
  CHECK_EQ(0, NumberOfElements(objectInfoMap));
  CHECK_EQ(0, NumberOfElements(notifierObjectInfoMap));
}


static int TestObserveSecurity(Handle<Context> observer_context,
                               Handle<Context> object_context,
                               Handle<Context> mutation_context) {
  Context::Scope observer_scope(observer_context);
  CompileRun("\x76\x61\x72\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x3d\x20\x6e\x75\x6c\x6c\x3b"
             "\x76\x61\x72\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x72\x29\x20\x7b\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x3d\x20\x72\x20\x7d\x3b");
  Handle<Value> observer = CompileRun("\x6f\x62\x73\x65\x72\x76\x65\x72");
  {
    Context::Scope object_scope(object_context);
    object_context->Global()->Set(
        String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x73\x65\x72\x76\x65\x72"), observer);
    CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
               "\x6f\x62\x6a\x2e\x6c\x65\x6e\x67\x74\x68\x20\x3d\x20\x30\x3b"
               "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x2c"
                   "\x5b\x27\x61\x64\x64\x27\x2c\x20\x27\x75\x70\x64\x61\x74\x65\x27\x2c\x20\x27\x64\x65\x6c\x65\x74\x65\x27\x2c\x27\x72\x65\x63\x6f\x6e\x66\x69\x67\x75\x72\x65\x27\x2c\x27\x73\x70\x6c\x69\x63\x65\x27\x5d"
               "\x29\x3b");
    Handle<Value> obj = CompileRun("\x6f\x62\x6a");
    {
      Context::Scope mutation_scope(mutation_context);
      mutation_context->Global()->Set(
          String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"), obj);
      CompileRun("\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x72\x27\x3b"
                 "\x6f\x62\x6a\x2e\x66\x6f\x6f\x20\x3d\x20\x27\x62\x61\x7a\x27\x3b"
                 "\x64\x65\x6c\x65\x74\x65\x20\x6f\x62\x6a\x2e\x66\x6f\x6f\x3b"
                 "\x4f\x62\x6a\x65\x63\x74\x2e\x64\x65\x66\x69\x6e\x65\x50\x72\x6f\x70\x65\x72\x74\x79\x28\x6f\x62\x6a\x2c\x20\x27\x62\x61\x72\x27\x2c\x20\x7b\x76\x61\x6c\x75\x65\x3a\x20\x27\x62\x6f\x74\x27\x7d\x29\x3b"
                 "\x41\x72\x72\x61\x79\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x70\x75\x73\x68\x2e\x63\x61\x6c\x6c\x28\x6f\x62\x6a\x2c\x20\x31\x2c\x20\x32\x2c\x20\x33\x29\x3b"
                 "\x41\x72\x72\x61\x79\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x73\x70\x6c\x69\x63\x65\x2e\x63\x61\x6c\x6c\x28\x6f\x62\x6a\x2c\x20\x31\x2c\x20\x32\x2c\x20\x32\x2c\x20\x34\x29\x3b"
                 "\x41\x72\x72\x61\x79\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x70\x6f\x70\x2e\x63\x61\x6c\x6c\x28\x6f\x62\x6a\x29\x3b"
                 "\x41\x72\x72\x61\x79\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x73\x68\x69\x66\x74\x2e\x63\x61\x6c\x6c\x28\x6f\x62\x6a\x29\x3b");
    }
  }
  return CompileRun("\x72\x65\x63\x6f\x72\x64\x73\x20\x3f\x20\x72\x65\x63\x6f\x72\x64\x73\x2e\x6c\x65\x6e\x67\x74\x68\x20\x3a\x20\x30")->Int32Value();
}


TEST(ObserverSecurityAAA) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);
  v8::Local<Context> contextA = Context::New(isolate);
  CHECK_EQ(8, TestObserveSecurity(contextA, contextA, contextA));
}


TEST(ObserverSecurityA1A2A3) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);

  v8::Local<Context> contextA1 = Context::New(isolate);
  v8::Local<Context> contextA2 = Context::New(isolate);
  v8::Local<Context> contextA3 = Context::New(isolate);

  Local<Value> foo = v8_str("\x66\x6f\x6f");
  contextA1->SetSecurityToken(foo);
  contextA2->SetSecurityToken(foo);
  contextA3->SetSecurityToken(foo);

  CHECK_EQ(8, TestObserveSecurity(contextA1, contextA2, contextA3));
}


TEST(ObserverSecurityAAB) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);
  v8::Local<Context> contextA = Context::New(isolate);
  v8::Local<Context> contextB = Context::New(isolate);
  CHECK_EQ(0, TestObserveSecurity(contextA, contextA, contextB));
}


TEST(ObserverSecurityA1A2B) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);

  v8::Local<Context> contextA1 = Context::New(isolate);
  v8::Local<Context> contextA2 = Context::New(isolate);
  v8::Local<Context> contextB = Context::New(isolate);

  Local<Value> foo = v8_str("\x66\x6f\x6f");
  contextA1->SetSecurityToken(foo);
  contextA2->SetSecurityToken(foo);

  CHECK_EQ(0, TestObserveSecurity(contextA1, contextA2, contextB));
}


TEST(ObserverSecurityABA) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);
  v8::Local<Context> contextA = Context::New(isolate);
  v8::Local<Context> contextB = Context::New(isolate);
  CHECK_EQ(0, TestObserveSecurity(contextA, contextB, contextA));
}


TEST(ObserverSecurityA1BA2) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);
  v8::Local<Context> contextA1 = Context::New(isolate);
  v8::Local<Context> contextA2 = Context::New(isolate);
  v8::Local<Context> contextB = Context::New(isolate);

  Local<Value> foo = v8_str("\x66\x6f\x6f");
  contextA1->SetSecurityToken(foo);
  contextA2->SetSecurityToken(foo);

  CHECK_EQ(0, TestObserveSecurity(contextA1, contextB, contextA2));
}


TEST(ObserverSecurityBAA) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);
  v8::Local<Context> contextA = Context::New(isolate);
  v8::Local<Context> contextB = Context::New(isolate);
  CHECK_EQ(0, TestObserveSecurity(contextB, contextA, contextA));
}


TEST(ObserverSecurityBA1A2) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);
  v8::Local<Context> contextA1 = Context::New(isolate);
  v8::Local<Context> contextA2 = Context::New(isolate);
  v8::Local<Context> contextB = Context::New(isolate);

  Local<Value> foo = v8_str("\x66\x6f\x6f");
  contextA1->SetSecurityToken(foo);
  contextA2->SetSecurityToken(foo);

  CHECK_EQ(0, TestObserveSecurity(contextB, contextA1, contextA2));
}


TEST(ObserverSecurityNotify) {
  v8::Isolate* isolate = CcTest::isolate();
  v8::HandleScope scope(isolate);
  v8::Local<Context> contextA = Context::New(isolate);
  v8::Local<Context> contextB = Context::New(isolate);

  Context::Scope scopeA(contextA);
  CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
             "\x76\x61\x72\x20\x72\x65\x63\x6f\x72\x64\x73\x41\x20\x3d\x20\x6e\x75\x6c\x6c\x3b"
             "\x76\x61\x72\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x41\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x72\x29\x20\x7b\x20\x72\x65\x63\x6f\x72\x64\x73\x41\x20\x3d\x20\x72\x20\x7d\x3b"
             "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x41\x29\x3b");
  Handle<Value> obj = CompileRun("\x6f\x62\x6a");

  {
    Context::Scope scopeB(contextB);
    contextB->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"), obj);
    CompileRun("\x76\x61\x72\x20\x72\x65\x63\x6f\x72\x64\x73\x42\x20\x3d\x20\x6e\x75\x6c\x6c\x3b"
               "\x76\x61\x72\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x42\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x72\x29\x20\x7b\x20\x72\x65\x63\x6f\x72\x64\x73\x42\x20\x3d\x20\x72\x20\x7d\x3b"
               "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x42\x29\x3b");
  }

  CompileRun("\x76\x61\x72\x20\x6e\x6f\x74\x69\x66\x69\x65\x72\x20\x3d\x20\x4f\x62\x6a\x65\x63\x74\x2e\x67\x65\x74\x4e\x6f\x74\x69\x66\x69\x65\x72\x28\x6f\x62\x6a\x29\x3b"
             "\x6e\x6f\x74\x69\x66\x69\x65\x72\x2e\x6e\x6f\x74\x69\x66\x79\x28\x7b\x20\x74\x79\x70\x65\x3a\x20\x27\x75\x70\x64\x61\x74\x65\x27\x20\x7d\x29\x3b");
  CHECK_EQ(1, CompileRun("\x72\x65\x63\x6f\x72\x64\x73\x41\x20\x3f\x20\x72\x65\x63\x6f\x72\x64\x73\x41\x2e\x6c\x65\x6e\x67\x74\x68\x20\x3a\x20\x30")->Int32Value());

  {
    Context::Scope scopeB(contextB);
    CHECK_EQ(0, CompileRun("\x72\x65\x63\x6f\x72\x64\x73\x42\x20\x3f\x20\x72\x65\x63\x6f\x72\x64\x73\x42\x2e\x6c\x65\x6e\x67\x74\x68\x20\x3a\x20\x30")->Int32Value());
  }
}


TEST(HiddenPropertiesLeakage) {
  HandleScope scope(CcTest::isolate());
  LocalContext context(CcTest::isolate());
  CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
             "\x76\x61\x72\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x3d\x20\x6e\x75\x6c\x6c\x3b"
             "\x76\x61\x72\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x72\x29\x20\x7b\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x3d\x20\x72\x20\x7d\x3b"
             "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b");
  Handle<Value> obj =
      context->Global()->Get(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"));
  Handle<Object>::Cast(obj)
      ->SetHiddenValue(String::NewFromUtf8(CcTest::isolate(), "\x66\x6f\x6f"),
                       Null(CcTest::isolate()));
  CompileRun("");  // trigger delivery
  CHECK(CompileRun("\x72\x65\x63\x6f\x72\x64\x73")->IsNull());
}


TEST(GetNotifierFromOtherContext) {
  HandleScope scope(CcTest::isolate());
  LocalContext context(CcTest::isolate());
  CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b");
  Handle<Value> instance = CompileRun("\x6f\x62\x6a");
  {
    LocalContext context2(CcTest::isolate());
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            instance);
    CHECK(CompileRun("\x4f\x62\x6a\x65\x63\x74\x2e\x67\x65\x74\x4e\x6f\x74\x69\x66\x69\x65\x72\x28\x6f\x62\x6a\x29")->IsNull());
  }
}


TEST(GetNotifierFromOtherOrigin) {
  HandleScope scope(CcTest::isolate());
  Handle<Value> foo = String::NewFromUtf8(CcTest::isolate(), "\x66\x6f\x6f");
  Handle<Value> bar = String::NewFromUtf8(CcTest::isolate(), "\x62\x61\x72");
  LocalContext context(CcTest::isolate());
  context->SetSecurityToken(foo);
  CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b");
  Handle<Value> instance = CompileRun("\x6f\x62\x6a");
  {
    LocalContext context2(CcTest::isolate());
    context2->SetSecurityToken(bar);
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            instance);
    CHECK(CompileRun("\x4f\x62\x6a\x65\x63\x74\x2e\x67\x65\x74\x4e\x6f\x74\x69\x66\x69\x65\x72\x28\x6f\x62\x6a\x29")->IsNull());
  }
}


TEST(GetNotifierFromSameOrigin) {
  HandleScope scope(CcTest::isolate());
  Handle<Value> foo = String::NewFromUtf8(CcTest::isolate(), "\x66\x6f\x6f");
  LocalContext context(CcTest::isolate());
  context->SetSecurityToken(foo);
  CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b");
  Handle<Value> instance = CompileRun("\x6f\x62\x6a");
  {
    LocalContext context2(CcTest::isolate());
    context2->SetSecurityToken(foo);
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            instance);
    CHECK(CompileRun("\x4f\x62\x6a\x65\x63\x74\x2e\x67\x65\x74\x4e\x6f\x74\x69\x66\x69\x65\x72\x28\x6f\x62\x6a\x29")->IsObject());
  }
}


static int GetGlobalObjectsCount() {
  int count = 0;
  i::HeapIterator it(CcTest::heap());
  for (i::HeapObject* object = it.next(); object != NULL; object = it.next())
    if (object->IsJSGlobalObject()) count++;
  return count;
}


static void CheckSurvivingGlobalObjectsCount(int expected) {
  // We need to collect all garbage twice to be sure that everything
  // has been collected.  This is because inline caches are cleared in
  // the first garbage collection but some of the maps have already
  // been marked at that point.  Therefore some of the maps are not
  // collected until the second garbage collection.
  CcTest::heap()->CollectAllGarbage(i::Heap::kNoGCFlags);
  CcTest::heap()->CollectAllGarbage(i::Heap::kMakeHeapIterableMask);
  int count = GetGlobalObjectsCount();
#ifdef DEBUG
  if (count != expected) CcTest::heap()->TracePathToGlobal();
#endif
  CHECK_EQ(expected, count);
}


TEST(DontLeakContextOnObserve) {
  HandleScope scope(CcTest::isolate());
  Handle<Value> foo = String::NewFromUtf8(CcTest::isolate(), "\x66\x6f\x6f");
  LocalContext context(CcTest::isolate());
  context->SetSecurityToken(foo);
  CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b");
  Handle<Value> object = CompileRun("\x6f\x62\x6a");
  {
    HandleScope scope(CcTest::isolate());
    LocalContext context2(CcTest::isolate());
    context2->SetSecurityToken(foo);
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            object);
    CompileRun("\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x28\x29\x20\x7b\x7d\x3b"
               "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x2c\x20\x5b\x27\x66\x6f\x6f\x27\x2c\x20\x27\x62\x61\x72\x27\x2c\x20\x27\x62\x61\x7a\x27\x5d\x29\x3b"
               "\x4f\x62\x6a\x65\x63\x74\x2e\x75\x6e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b");
  }

  CcTest::isolate()->ContextDisposedNotification();
  CheckSurvivingGlobalObjectsCount(1);
}


TEST(DontLeakContextOnGetNotifier) {
  HandleScope scope(CcTest::isolate());
  Handle<Value> foo = String::NewFromUtf8(CcTest::isolate(), "\x66\x6f\x6f");
  LocalContext context(CcTest::isolate());
  context->SetSecurityToken(foo);
  CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b");
  Handle<Value> object = CompileRun("\x6f\x62\x6a");
  {
    HandleScope scope(CcTest::isolate());
    LocalContext context2(CcTest::isolate());
    context2->SetSecurityToken(foo);
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            object);
    CompileRun("\x4f\x62\x6a\x65\x63\x74\x2e\x67\x65\x74\x4e\x6f\x74\x69\x66\x69\x65\x72\x28\x6f\x62\x6a\x29\x3b");
  }

  CcTest::isolate()->ContextDisposedNotification();
  CheckSurvivingGlobalObjectsCount(1);
}


TEST(DontLeakContextOnNotifierPerformChange) {
  HandleScope scope(CcTest::isolate());
  Handle<Value> foo = String::NewFromUtf8(CcTest::isolate(), "\x66\x6f\x6f");
  LocalContext context(CcTest::isolate());
  context->SetSecurityToken(foo);
  CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b");
  Handle<Value> object = CompileRun("\x6f\x62\x6a");
  Handle<Value> notifier = CompileRun("\x4f\x62\x6a\x65\x63\x74\x2e\x67\x65\x74\x4e\x6f\x74\x69\x66\x69\x65\x72\x28\x6f\x62\x6a\x29");
  {
    HandleScope scope(CcTest::isolate());
    LocalContext context2(CcTest::isolate());
    context2->SetSecurityToken(foo);
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6f\x62\x6a"),
                            object);
    context2->Global()->Set(String::NewFromUtf8(CcTest::isolate(), "\x6e\x6f\x74\x69\x66\x69\x65\x72"),
                            notifier);
    CompileRun("\x76\x61\x72\x20\x6f\x62\x6a\x32\x20\x3d\x20\x7b\x7d\x3b"
               "\x76\x61\x72\x20\x6e\x6f\x74\x69\x66\x69\x65\x72\x32\x20\x3d\x20\x4f\x62\x6a\x65\x63\x74\x2e\x67\x65\x74\x4e\x6f\x74\x69\x66\x69\x65\x72\x28\x6f\x62\x6a\x32\x29\x3b"
               "\x6e\x6f\x74\x69\x66\x69\x65\x72\x32\x2e\x70\x65\x72\x66\x6f\x72\x6d\x43\x68\x61\x6e\x67\x65\x2e\x63\x61\x6c\x6c\x28"
                   "\x6e\x6f\x74\x69\x66\x69\x65\x72\x2c\x20\x27\x66\x6f\x6f\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x7b\x7d\x29");
  }

  CcTest::isolate()->ContextDisposedNotification();
  CheckSurvivingGlobalObjectsCount(1);
}
