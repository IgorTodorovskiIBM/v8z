// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <stdlib.h>

#include "src/v8.h"
#include "test/cctest/cctest.h"

namespace {


static void Cleanup() {
  CompileRun(
      "\x64\x65\x6c\x65\x74\x65\x20\x6f\x62\x6a\x65\x63\x74\x2e\x78\x3b"
      "\x64\x65\x6c\x65\x74\x65\x20\x68\x69\x64\x64\x65\x6e\x5f\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x78\x3b"
      "\x64\x65\x6c\x65\x74\x65\x20\x6f\x62\x6a\x65\x63\x74\x5b\x53\x79\x6d\x62\x6f\x6c\x2e\x75\x6e\x73\x63\x6f\x70\x61\x62\x6c\x65\x73\x5d\x3b"
      "\x64\x65\x6c\x65\x74\x65\x20\x68\x69\x64\x64\x65\x6e\x5f\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x5b\x53\x79\x6d\x62\x6f\x6c\x2e\x75\x6e\x73\x63\x6f\x70\x61\x62\x6c\x65\x73\x5d\x3b");
}


TEST(Unscopables) {
  LocalContext context;
  v8::Isolate* isolate = context->GetIsolate();
  v8::HandleScope handle_scope(isolate);

  v8::Local<v8::FunctionTemplate> t0 = v8::FunctionTemplate::New(isolate);
  v8::Local<v8::FunctionTemplate> t1 = v8::FunctionTemplate::New(isolate);

  t1->SetHiddenPrototype(true);

  v8::Local<v8::Object> object = t0->GetFunction()->NewInstance();
  v8::Local<v8::Object> hidden_prototype = t1->GetFunction()->NewInstance();

  object->SetPrototype(hidden_prototype);

  context->Global()->Set(v8_str("\x6f\x62\x6a\x65\x63\x74"), object);
  context->Global()->Set(v8_str("\x68\x69\x64\x64\x65\x6e\x5f\x70\x72\x6f\x74\x6f\x74\x79\x70\x65"), hidden_prototype);

  CHECK_EQ(1, CompileRun(
                  "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x3b"
                  "\x76\x61\x72\x20\x78\x20\x3d\x20\x30\x3b"
                  "\x6f\x62\x6a\x65\x63\x74\x2e\x78\x20\x3d\x20\x31\x3b"
                  "\x77\x69\x74\x68\x20\x28\x6f\x62\x6a\x65\x63\x74\x29\x20\x7b"
                  "\x20\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x78\x3b"
                  "\x7d"
                  "\x72\x65\x73\x75\x6c\x74")->Int32Value());

  Cleanup();
  CHECK_EQ(2, CompileRun(
                  "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x3b"
                  "\x76\x61\x72\x20\x78\x20\x3d\x20\x30\x3b"
                  "\x68\x69\x64\x64\x65\x6e\x5f\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x78\x20\x3d\x20\x32\x3b"
                  "\x77\x69\x74\x68\x20\x28\x6f\x62\x6a\x65\x63\x74\x29\x20\x7b"
                  "\x20\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x78\x3b"
                  "\x7d"
                  "\x72\x65\x73\x75\x6c\x74")->Int32Value());

  Cleanup();
  CHECK_EQ(0, CompileRun(
                  "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x3b"
                  "\x76\x61\x72\x20\x78\x20\x3d\x20\x30\x3b"
                  "\x6f\x62\x6a\x65\x63\x74\x2e\x78\x20\x3d\x20\x33\x3b"
                  "\x6f\x62\x6a\x65\x63\x74\x5b\x53\x79\x6d\x62\x6f\x6c\x2e\x75\x6e\x73\x63\x6f\x70\x61\x62\x6c\x65\x73\x5d\x20\x3d\x20\x7b\x78\x3a\x20\x74\x72\x75\x65\x7d\x3b"
                  "\x77\x69\x74\x68\x20\x28\x6f\x62\x6a\x65\x63\x74\x29\x20\x7b"
                  "\x20\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x78\x3b"
                  "\x7d"
                  "\x72\x65\x73\x75\x6c\x74")->Int32Value());

  Cleanup();
  CHECK_EQ(0, CompileRun(
                  "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x3b"
                  "\x76\x61\x72\x20\x78\x20\x3d\x20\x30\x3b"
                  "\x68\x69\x64\x64\x65\x6e\x5f\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x78\x20\x3d\x20\x34\x3b"
                  "\x68\x69\x64\x64\x65\x6e\x5f\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x5b\x53\x79\x6d\x62\x6f\x6c\x2e\x75\x6e\x73\x63\x6f\x70\x61\x62\x6c\x65\x73\x5d\x20\x3d\x20\x7b\x78\x3a\x20\x74\x72\x75\x65\x7d\x3b"
                  "\x77\x69\x74\x68\x20\x28\x6f\x62\x6a\x65\x63\x74\x29\x20\x7b"
                  "\x20\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x78\x3b"
                  "\x7d"
                  "\x72\x65\x73\x75\x6c\x74")->Int32Value());

  Cleanup();
  CHECK_EQ(0, CompileRun(
                  "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x3b"
                  "\x76\x61\x72\x20\x78\x20\x3d\x20\x30\x3b"
                  "\x6f\x62\x6a\x65\x63\x74\x2e\x78\x20\x3d\x20\x35\x3b"
                  "\x68\x69\x64\x64\x65\x6e\x5f\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x5b\x53\x79\x6d\x62\x6f\x6c\x2e\x75\x6e\x73\x63\x6f\x70\x61\x62\x6c\x65\x73\x5d\x20\x3d\x20\x7b\x78\x3a\x20\x74\x72\x75\x65\x7d\x3b"
                  "\x77\x69\x74\x68\x20\x28\x6f\x62\x6a\x65\x63\x74\x29\x20\x7b"
                  "\x20\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x78\x3b"
                  "\x7d"
                  "\x72\x65\x73\x75\x6c\x74\x3b")->Int32Value());

  Cleanup();
  CHECK_EQ(0, CompileRun(
                  "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x3b"
                  "\x76\x61\x72\x20\x78\x20\x3d\x20\x30\x3b"
                  "\x68\x69\x64\x64\x65\x6e\x5f\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x78\x20\x3d\x20\x36\x3b"
                  "\x6f\x62\x6a\x65\x63\x74\x5b\x53\x79\x6d\x62\x6f\x6c\x2e\x75\x6e\x73\x63\x6f\x70\x61\x62\x6c\x65\x73\x5d\x20\x3d\x20\x7b\x78\x3a\x20\x74\x72\x75\x65\x7d\x3b"
                  "\x77\x69\x74\x68\x20\x28\x6f\x62\x6a\x65\x63\x74\x29\x20\x7b"
                  "\x20\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x78\x3b"
                  "\x7d"
                  "\x72\x65\x73\x75\x6c\x74")->Int32Value());
}
}
