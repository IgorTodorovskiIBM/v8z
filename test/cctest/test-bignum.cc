// Copyright 2010 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <stdlib.h>

#include "src/v8.h"

#include "src/base/platform/platform.h"
#include "src/bignum.h"
#include "test/cctest/cctest.h"

using namespace v8::internal;


static const int kBufferSize = 1024;

static void AssignHexString(Bignum* bignum, const char* str) {
  bignum->AssignHexString(Vector<const char>(str, StrLength(str)));
}


static void AssignDecimalString(Bignum* bignum, const char* str) {
  bignum->AssignDecimalString(Vector<const char>(str, StrLength(str)));
}


TEST(Assign) {
  char buffer[kBufferSize];
  Bignum bignum;
  Bignum bignum2;
  bignum.AssignUInt16(0);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x30", buffer);
  bignum.AssignUInt16(0xA);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41", buffer);
  bignum.AssignUInt16(0x20);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x30", buffer);


  bignum.AssignUInt64(0);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x30", buffer);
  bignum.AssignUInt64(0xA);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41", buffer);
  bignum.AssignUInt64(0x20);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x30", buffer);
  bignum.AssignUInt64(0x100);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30", buffer);

  // The first real test, since this will not fit into one bigit.
  bignum.AssignUInt64(0x12345678);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x34\x35\x36\x37\x38", buffer);

  uint64_t big = V8_2PART_UINT64_C(0xFFFFFFFF, FFFFFFFF);
  bignum.AssignUInt64(big);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46", buffer);

  big = V8_2PART_UINT64_C(0x12345678, 9ABCDEF0);
  bignum.AssignUInt64(big);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x34\x35\x36\x37\x38\x39\x41\x42\x43\x44\x45\x46\x30", buffer);

  bignum2.AssignBignum(bignum);
  CHECK(bignum2.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x34\x35\x36\x37\x38\x39\x41\x42\x43\x44\x45\x46\x30", buffer);

  AssignDecimalString(&bignum, "\x30");
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x30", buffer);

  AssignDecimalString(&bignum, "\x31");
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x34\x39\x39\x36\x30\x32\x44\x32", buffer);

  AssignHexString(&bignum, "\x30");
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x30", buffer);

  AssignHexString(&bignum, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x41\x42\x43\x44\x45\x46\x30");
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x34\x35\x36\x37\x38\x39\x41\x42\x43\x44\x45\x46\x30", buffer);
}


TEST(ShiftLeft) {
  char buffer[kBufferSize];
  Bignum bignum;
  AssignHexString(&bignum, "\x30");
  bignum.ShiftLeft(100);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x30", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.ShiftLeft(1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.ShiftLeft(4);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.ShiftLeft(32);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.ShiftLeft(64);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x41\x42\x43\x44\x45\x46");
  bignum.ShiftLeft(64);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x34\x35\x36\x37\x38\x39\x41\x42\x43\x44\x45\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);
  bignum.ShiftLeft(1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x34\x36\x38\x41\x43\x46\x31\x33\x35\x37\x39\x42\x44\x45\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);
}


TEST(AddUInt64) {
  char buffer[kBufferSize];
  Bignum bignum;
  AssignHexString(&bignum, "\x30");
  bignum.AddUInt64(0xA);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.AddUInt64(0xA);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x42", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.AddUInt64(0x100);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x31", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.AddUInt64(0xFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddUInt64(0x1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.AddUInt64(0xFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddUInt64(0x1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  bignum.AddUInt64(1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  bignum.AddUInt64(0xFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46", buffer);

  AssignHexString(&bignum, "\x30");
  bignum.AddUInt64(V8_2PART_UINT64_C(0xA, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.AddUInt64(V8_2PART_UINT64_C(0xA, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41\x30\x30\x30\x30\x30\x30\x30\x31", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.AddUInt64(V8_2PART_UINT64_C(0x100, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.AddUInt64(V8_2PART_UINT64_C(0xFFFF, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x30\x30\x30\x30\x30\x30\x30\x31", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddUInt64(V8_2PART_UINT64_C(0x1, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x46\x46\x46\x46\x46\x46\x46", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.AddUInt64(V8_2PART_UINT64_C(0xFFFF, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddUInt64(V8_2PART_UINT64_C(0x1, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46\x46\x46\x46\x46", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  bignum.AddUInt64(V8_2PART_UINT64_C(0x1, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  bignum.AddUInt64(V8_2PART_UINT64_C(0xFFFF, 00000000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46\x30\x30\x30\x30\x30\x30\x30\x30", buffer);
}


TEST(AddBignum) {
  char buffer[kBufferSize];
  Bignum bignum;
  Bignum other;

  AssignHexString(&other, "\x31");
  AssignHexString(&bignum, "\x30");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  AssignHexString(&bignum, "\x31");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31", buffer);

  AssignHexString(&other, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");

  AssignHexString(&bignum, "\x31");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x46\x46\x46\x46\x46\x46\x46", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  other.ShiftLeft(64);
  // other == "10000000000000000000000000000"

  bignum.AssignUInt16(0x1);
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46\x46\x46\x46", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  bignum.AddBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);
}


TEST(SubtractBignum) {
  char buffer[kBufferSize];
  Bignum bignum;
  Bignum other;

  AssignHexString(&bignum, "\x31");
  AssignHexString(&other, "\x30");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  AssignHexString(&bignum, "\x32");
  AssignHexString(&other, "\x30");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30");
  AssignHexString(&other, "\x31");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  AssignHexString(&other, "\x31");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31");
  AssignHexString(&other, "\x31");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31");
  AssignHexString(&other, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x46\x46\x46\x46\x46\x46\x46");
  AssignHexString(&other, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  AssignHexString(&other, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  AssignHexString(&other, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  // "10 0000 0000 0000 0000 0000 0000"
  AssignHexString(&other, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&other, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  other.ShiftLeft(48);
  // other == "1000000000000000000000000"

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  // bignum == "10000000000000000000000000"
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  other.AssignUInt16(0x1);
  other.ShiftLeft(35);
  // other == "800000000"
  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46");
  bignum.ShiftLeft(60);
  // bignum = FFFFFFF000000000000000
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x45\x46\x46\x46\x46\x46\x46\x38\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x38\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.SubtractBignum(other);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x37\x46\x46\x46\x46\x46\x46\x46\x46", buffer);
}


TEST(MultiplyUInt32) {
  char buffer[kBufferSize];
  Bignum bignum;

  AssignHexString(&bignum, "\x30");
  bignum.MultiplyByUInt32(0x25);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x30", buffer);

  AssignHexString(&bignum, "\x32");
  bignum.MultiplyByUInt32(0x5);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30");
  bignum.MultiplyByUInt32(0x9);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x39\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.MultiplyByUInt32(0xFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.MultiplyByUInt32(0xFFFFFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x32\x33\x34\x35\x36\x37\x41\x42\x43\x44");
  bignum.MultiplyByUInt32(0xFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x33\x33\x33\x33\x35\x35\x35\x32\x34\x33\x33", buffer);

  AssignHexString(&bignum, "\x31\x32\x33\x34\x35\x36\x37\x41\x42\x43\x44");
  bignum.MultiplyByUInt32(0xFFFFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x34\x35\x36\x37\x39\x39\x39\x38\x41\x39\x38\x35\x34\x33\x33", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.MultiplyByUInt32(0x2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x45", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.MultiplyByUInt32(0x4);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x33\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x43", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.MultiplyByUInt32(0xF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x45\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x31", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.MultiplyByUInt32(0xFFFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x45\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x30\x30\x30\x30\x30\x31", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  // "10 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt32(2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  // "10 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt32(0xF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0xFFFF);
  bignum.ShiftLeft(100);
  // "FFFF0 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt32(0xFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x45\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0xFFFF);
  bignum.ShiftLeft(100);
  // "FFFF0 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt32(0xFFFFFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x45\x46\x46\x46\x46\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0xFFFF);
  bignum.ShiftLeft(100);
  // "FFFF0 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt32(0xFFFFFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x45\x46\x46\x46\x46\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x35\x36\x31\x31\x32\x33\x30\x33\x38\x34\x35\x32\x39\x37\x37\x37");
  bignum.MultiplyByUInt32(10000000);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x31\x30\x45\x44\x44\x36\x44\x34\x43\x44\x44\x32\x35\x38\x30\x45\x45\x38\x30", buffer);
}


TEST(MultiplyUInt64) {
  char buffer[kBufferSize];
  Bignum bignum;

  AssignHexString(&bignum, "\x30");
  bignum.MultiplyByUInt64(0x25);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x30", buffer);

  AssignHexString(&bignum, "\x32");
  bignum.MultiplyByUInt64(0x5);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30");
  bignum.MultiplyByUInt64(0x9);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x39\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.MultiplyByUInt64(0xFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum.MultiplyByUInt64(V8_2PART_UINT64_C(0xFFFFFFFF, FFFFFFFF));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignHexString(&bignum, "\x31\x32\x33\x34\x35\x36\x37\x41\x42\x43\x44");
  bignum.MultiplyByUInt64(0xFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x33\x33\x33\x33\x35\x35\x35\x32\x34\x33\x33", buffer);

  AssignHexString(&bignum, "\x31\x32\x33\x34\x35\x36\x37\x41\x42\x43\x44");
  bignum.MultiplyByUInt64(V8_2PART_UINT64_C(0xFF, FFFFFFFF));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x34\x35\x36\x37\x41\x42\x43\x42\x44\x43\x42\x41\x39\x38\x35\x34\x33\x33", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.MultiplyByUInt64(0x2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x45", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.MultiplyByUInt64(0x4);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x33\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x43", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.MultiplyByUInt64(0xF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x45\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x31", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.MultiplyByUInt64(V8_2PART_UINT64_C(0xFFFFFFFF, FFFFFFFF));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x45\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  // "10 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt64(2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0x1);
  bignum.ShiftLeft(100);
  // "10 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt64(0xF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0xFFFF);
  bignum.ShiftLeft(100);
  // "FFFF0 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt64(0xFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x45\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0xFFFF);
  bignum.ShiftLeft(100);
  // "FFFF0 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt64(0xFFFFFFFF);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x45\x46\x46\x46\x46\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignUInt16(0xFFFF);
  bignum.ShiftLeft(100);
  // "FFFF0 0000 0000 0000 0000 0000 0000"
  bignum.MultiplyByUInt64(V8_2PART_UINT64_C(0xFFFFFFFF, FFFFFFFF));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x45\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x35\x36\x31\x31\x32\x33\x30\x33\x38\x34\x35\x32\x39\x37\x37\x37");
  bignum.MultiplyByUInt64(V8_2PART_UINT64_C(0x8ac72304, 89e80000));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x45\x31\x30\x45\x45\x34\x42\x31\x31\x44\x31\x35\x41\x37\x46\x33\x44\x45\x37\x46\x33\x43\x37\x36\x38\x30\x30\x30\x30", buffer);
}


TEST(MultiplyPowerOfTen) {
  char buffer[kBufferSize];
  Bignum bignum;

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x33\x30\x33\x34", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x45\x32\x30\x38", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(3);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x44\x34\x35\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(4);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x42\x43\x34\x42\x32\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(5);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x37\x35\x41\x45\x46\x34\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(6);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x34\x39\x38\x44\x35\x38\x38\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(7);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x44\x46\x38\x35\x37\x35\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(8);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x43\x42\x42\x33\x36\x39\x32\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(9);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x31\x46\x35\x30\x32\x31\x42\x34\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(10);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x42\x33\x39\x32\x31\x35\x31\x30\x38\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(11);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x37\x30\x33\x42\x34\x44\x32\x41\x35\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(12);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x34\x36\x32\x35\x31\x30\x33\x41\x37\x32\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(13);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x42\x44\x37\x32\x41\x32\x34\x38\x37\x34\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(14);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x42\x36\x36\x37\x41\x35\x36\x44\x34\x38\x38\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(15);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x31\x32\x30\x30\x43\x37\x36\x34\x34\x44\x35\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(16);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41\x42\x34\x30\x37\x43\x39\x45\x42\x30\x35\x32\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(17);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x36\x42\x30\x38\x34\x44\x45\x33\x32\x45\x33\x33\x34\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(18);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x34\x32\x45\x35\x33\x30\x41\x44\x46\x43\x45\x30\x30\x38\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(19);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x39\x43\x46\x33\x45\x36\x43\x42\x45\x30\x43\x30\x35\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(20);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x41\x32\x31\x38\x37\x30\x33\x46\x36\x43\x37\x38\x33\x32\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(21);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x35\x34\x46\x34\x36\x32\x37\x41\x33\x43\x42\x31\x46\x34\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(22);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41\x33\x35\x31\x38\x42\x44\x38\x43\x36\x35\x45\x46\x33\x38\x38\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(23);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x36\x36\x31\x32\x46\x37\x36\x37\x37\x42\x46\x42\x35\x38\x33\x35\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(24);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x33\x46\x43\x42\x44\x41\x41\x30\x41\x44\x37\x44\x31\x37\x32\x31\x32\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(25);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x37\x44\x46\x36\x38\x41\x34\x36\x43\x36\x45\x32\x45\x37\x34\x42\x34\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(26);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x38\x45\x42\x41\x31\x36\x36\x43\x33\x43\x34\x44\x44\x30\x38\x46\x30\x38\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(27);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x39\x33\x34\x34\x45\x30\x33\x41\x35\x42\x30\x41\x32\x35\x39\x36\x35\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(28);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x39\x42\x43\x30\x42\x30\x43\x32\x34\x37\x38\x45\x36\x35\x37\x37\x44\x46\x32\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(29);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x36\x31\x35\x38\x36\x45\x37\x39\x36\x43\x42\x38\x46\x46\x36\x41\x45\x42\x37\x34\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(30);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x33\x43\x44\x37\x34\x35\x30\x42\x45\x33\x46\x33\x39\x46\x41\x32\x44\x33\x32\x38\x38\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(31);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x36\x30\x36\x38\x42\x32\x37\x36\x45\x37\x38\x34\x33\x43\x35\x43\x33\x46\x39\x35\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(50);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x34\x39\x44\x31\x42\x34\x43\x46\x45\x44\x30\x33\x42\x32\x33\x41\x42\x35\x46\x34\x45\x31\x31\x39\x36\x45\x46\x34\x35\x43\x30\x38\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(100);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x35\x38\x32\x37\x32\x34\x39\x46\x32\x37\x31\x36\x35\x30\x32\x34\x46\x42\x43\x34\x37\x44\x46\x43\x41\x39\x33\x35\x39\x42\x46\x33\x31\x36\x33\x33\x32\x44\x31\x42\x39\x31\x41\x43\x45\x45\x43\x46\x34\x37\x31\x46\x42\x41\x42\x30\x36\x44\x39\x42\x32"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(200);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x36\x34\x43\x31\x46\x35\x43\x30\x36\x43\x33\x38\x31\x36\x41\x46\x42\x46\x38\x44\x41\x46\x44\x35\x41\x33\x44\x37\x35\x36\x33\x36\x35\x42\x42\x30\x46\x44\x30\x32\x30\x45\x36\x46\x30\x38\x34\x45\x37\x35\x39\x43\x31\x46\x37\x43\x39\x39\x45\x34\x46"
           "\x35\x35\x42\x39\x41\x43\x43\x36\x36\x37\x43\x45\x43\x34\x37\x37\x45\x42\x39\x35\x38\x43\x32\x41\x45\x45\x42\x33\x43\x36\x43\x31\x39\x42\x41\x33\x35\x41\x31\x41\x44\x33\x30\x42\x33\x35\x43\x35\x31\x45\x42\x37\x32\x30\x34\x30\x39\x32\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(500);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x39\x36\x37\x34\x31\x41\x36\x32\x35\x45\x42\x35\x44\x37\x43\x39\x31\x30\x33\x39\x46\x45\x42\x35\x43\x35\x41\x43\x44\x36\x44\x39\x38\x33\x31\x45\x44\x41\x35\x42\x30\x38\x33\x44\x38\x30\x30\x45\x36\x30\x31\x39\x34\x34\x32\x43\x38\x43\x38\x32\x32\x33"
           "\x33\x45\x41\x46\x42\x33\x35\x30\x31\x46\x45\x32\x30\x35\x38\x30\x36\x32\x32\x32\x31\x45\x31\x35\x31\x32\x31\x33\x33\x34\x39\x32\x38\x38\x38\x30\x38\x32\x37\x44\x45\x45\x31\x45\x43\x33\x33\x37\x41\x38\x42\x32\x36\x34\x38\x39\x46\x33\x41\x34\x30\x41"
           "\x43\x42\x34\x34\x30\x41\x32\x34\x32\x33\x37\x33\x34\x34\x37\x32\x44\x31\x30\x42\x46\x43\x45\x38\x38\x36\x46\x34\x31\x42\x33\x41\x46\x39\x46\x39\x35\x30\x33\x30\x31\x33\x44\x38\x36\x44\x30\x38\x38\x39\x32\x39\x43\x41\x38\x36\x45\x45\x42\x34\x44\x38"
           "\x42\x39\x43\x38\x33\x31\x44\x30\x42\x44\x35\x33\x33\x32\x37\x42\x39\x39\x34\x41\x30\x33\x32\x36\x32\x32\x37\x43\x46\x44\x30\x45\x43\x42\x46\x32\x45\x42\x34\x38\x42\x30\x32\x33\x38\x37\x41\x41\x45\x32\x44\x34\x43\x43\x43\x44\x46\x31\x46\x31\x41\x31"
           "\x42\x38\x43\x43\x34\x46\x31\x46\x41\x32\x43\x35\x36\x41\x44\x34\x30\x44\x30\x45\x34\x44\x41\x41\x39\x43\x32\x38\x43\x44\x42\x46\x30\x41\x35\x34\x39\x30\x39\x38\x45\x41\x31\x33\x32\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  AssignDecimalString(&bignum, "\x31\x32\x33\x34");
  bignum.MultiplyByPowerOfTen(1000);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x35\x38\x30\x34\x30\x46\x39\x39\x42\x31\x43\x44\x31\x43\x43\x39\x38\x31\x39\x43\x36\x37\x36\x44\x34\x31\x33\x45\x41\x35\x30\x45\x34\x41\x36\x41\x38\x46\x31\x31\x34\x42\x42\x30\x43\x36\x35\x34\x31\x38\x43\x36\x32\x44\x33\x39\x39\x42\x38\x31"
           "\x36\x33\x36\x31\x34\x36\x36\x43\x41\x38\x45\x30\x39\x35\x31\x39\x33\x45\x31\x45\x45\x39\x37\x31\x37\x33\x35\x35\x33\x35\x39\x37\x43\x39\x36\x36\x37\x33\x41\x46\x36\x37\x46\x41\x46\x45\x32\x37\x41\x36\x36\x45\x37\x45\x46\x32\x45\x35\x45\x46\x32\x45"
           "\x45\x33\x46\x35\x46\x35\x30\x37\x30\x43\x43\x31\x37\x46\x45\x38\x33\x42\x41\x35\x33\x44\x34\x30\x41\x36\x36\x41\x36\x36\x36\x41\x30\x32\x46\x39\x45\x30\x30\x42\x30\x45\x31\x31\x33\x32\x38\x44\x32\x32\x32\x34\x42\x38\x36\x39\x34\x43\x37\x33\x37\x32"
           "\x46\x33\x44\x35\x33\x36\x41\x30\x41\x44\x31\x39\x38\x35\x39\x31\x31\x42\x44\x33\x36\x31\x34\x39\x36\x46\x32\x36\x38\x45\x38\x42\x32\x33\x31\x31\x32\x35\x30\x30\x45\x41\x46\x39\x42\x38\x38\x41\x39\x42\x43\x36\x37\x42\x32\x41\x42\x30\x34\x44\x33\x38"
           "\x37\x46\x45\x46\x41\x43\x44\x30\x30\x46\x35\x41\x46\x34\x46\x37\x36\x34\x46\x39\x41\x42\x43\x33\x41\x42\x43\x44\x45\x35\x34\x36\x31\x32\x44\x45\x33\x38\x43\x44\x39\x30\x43\x42\x36\x36\x34\x37\x43\x41\x33\x38\x39\x45\x41\x30\x45\x38\x36\x42\x31\x36"
           "\x42\x46\x37\x41\x31\x46\x33\x34\x30\x38\x36\x45\x30\x35\x41\x44\x42\x45\x30\x30\x42\x44\x31\x36\x37\x33\x42\x45\x30\x30\x46\x41\x43\x34\x42\x33\x34\x41\x46\x31\x30\x39\x31\x45\x38\x41\x44\x35\x30\x42\x41\x36\x37\x35\x45\x30\x33\x38\x31\x34\x34\x30"
           "\x45\x41\x38\x45\x39\x44\x39\x33\x45\x37\x35\x44\x38\x31\x36\x42\x41\x42\x33\x37\x43\x39\x38\x34\x34\x42\x31\x34\x34\x31\x43\x33\x38\x46\x43\x36\x35\x43\x46\x33\x30\x41\x42\x42\x37\x31\x42\x33\x36\x34\x33\x33\x41\x46\x32\x36\x44\x44\x39\x37\x42\x44"
           "\x41\x42\x42\x41\x39\x36\x43\x30\x33\x42\x34\x39\x31\x39\x42\x38\x46\x33\x35\x31\x35\x42\x39\x32\x38\x32\x36\x42\x38\x35\x34\x36\x32\x38\x33\x33\x33\x38\x30\x44\x43\x31\x39\x33\x44\x37\x39\x46\x36\x39\x44\x32\x30\x44\x44\x36\x30\x33\x38\x43\x39\x39"
           "\x36\x31\x31\x34\x45\x46\x36\x43\x34\x34\x36\x46\x30\x42\x41\x32\x38\x43\x43\x37\x37\x32\x41\x43\x42\x41\x35\x38\x42\x38\x31\x43\x30\x34\x46\x38\x46\x46\x44\x45\x37\x42\x31\x38\x43\x34\x45\x35\x41\x33\x41\x42\x43\x35\x31\x45\x36\x33\x37\x46\x44\x46"
           "\x36\x45\x33\x37\x46\x44\x46\x46\x30\x34\x43\x39\x34\x30\x39\x31\x39\x33\x39\x30\x46\x34\x46\x46\x39\x32\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  Bignum bignum2;
  AssignHexString(&bignum2, "\x33\x44\x41\x37\x37\x34\x43\x30\x37\x46\x42\x35\x44\x46\x35\x34\x32\x38\x34\x44\x30\x39\x43\x36\x37\x35\x41\x34\x39\x32\x31\x36\x35\x42\x38\x33\x30\x44\x35\x44\x41\x41\x45\x42\x32\x41\x37\x35\x30\x31"
                            "\x44\x41\x31\x37\x43\x46\x39\x44\x46\x41\x31\x43\x41\x32\x32\x38\x32\x32\x36\x39\x46\x39\x32\x41\x32\x35\x41\x39\x37\x33\x31\x34\x32\x39\x36\x42\x37\x31\x37\x45\x33\x44\x43\x42\x42\x39\x46\x45\x31\x37"
                            "\x34\x31\x41\x38\x34\x32\x46\x45\x32\x39\x31\x33\x46\x35\x34\x30\x46\x34\x30\x37\x39\x36\x46\x32\x33\x38\x31\x31\x35\x35\x37\x36\x33\x35\x30\x32\x43\x35\x38\x42\x31\x35\x41\x46\x37\x41\x37\x46\x38\x38"
                            "\x36\x46\x37\x34\x34\x43\x39\x31\x36\x34\x46\x46\x34\x30\x39\x41\x32\x38\x46\x37\x46\x41\x30\x43\x34\x31\x46\x38\x39\x45\x44\x37\x39\x43\x31\x42\x45\x39\x46\x33\x32\x32\x43\x38\x35\x37\x38\x42\x39\x37"
                            "\x38\x34\x31\x46\x31\x43\x42\x41\x41\x31\x37\x44\x39\x30\x31\x42\x45\x31\x32\x33\x30\x45\x33\x43\x30\x30\x45\x31\x43\x36\x34\x33\x41\x46\x33\x32\x36\x33\x38\x42\x35\x36\x37\x34\x45\x30\x31\x46\x45\x41"
                            "\x39\x36\x46\x43\x39\x30\x38\x36\x34\x45\x36\x32\x31\x42\x38\x35\x36\x41\x39\x45\x31\x43\x45\x35\x36\x45\x36\x45\x42\x35\x34\x35\x42\x39\x43\x32\x46\x38\x46\x30\x43\x43\x31\x30\x44\x44\x41\x38\x38\x44"
                            "\x43\x43\x36\x44\x32\x38\x32\x36\x30\x35\x46\x38\x44\x42\x36\x37\x30\x34\x34\x46\x32\x44\x46\x44\x33\x36\x39\x35\x45\x37\x42\x41\x36\x33\x38\x37\x37\x41\x45\x31\x36\x37\x30\x31\x35\x33\x36\x41\x45\x36"
                            "\x35\x36\x37\x43\x37\x39\x34\x44\x30\x42\x46\x45\x33\x33\x38\x44\x46\x42\x42\x34\x32\x44\x39\x32\x44\x34\x32\x31\x35\x41\x46\x33\x42\x42\x32\x32\x42\x46\x30\x41\x38\x42\x32\x38\x33\x46\x44\x44\x43\x32"
                            "\x43\x36\x36\x37\x41\x31\x30\x39\x35\x38\x45\x41\x36\x44\x32");
  CHECK(bignum2.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x33\x44\x41\x37\x37\x34\x43\x30\x37\x46\x42\x35\x44\x46\x35\x34\x32\x38\x34\x44\x30\x39\x43\x36\x37\x35\x41\x34\x39\x32\x31\x36\x35\x42\x38\x33\x30\x44\x35\x44\x41\x41\x45\x42\x32\x41\x37\x35\x30\x31"
           "\x44\x41\x31\x37\x43\x46\x39\x44\x46\x41\x31\x43\x41\x32\x32\x38\x32\x32\x36\x39\x46\x39\x32\x41\x32\x35\x41\x39\x37\x33\x31\x34\x32\x39\x36\x42\x37\x31\x37\x45\x33\x44\x43\x42\x42\x39\x46\x45\x31\x37"
           "\x34\x31\x41\x38\x34\x32\x46\x45\x32\x39\x31\x33\x46\x35\x34\x30\x46\x34\x30\x37\x39\x36\x46\x32\x33\x38\x31\x31\x35\x35\x37\x36\x33\x35\x30\x32\x43\x35\x38\x42\x31\x35\x41\x46\x37\x41\x37\x46\x38\x38"
           "\x36\x46\x37\x34\x34\x43\x39\x31\x36\x34\x46\x46\x34\x30\x39\x41\x32\x38\x46\x37\x46\x41\x30\x43\x34\x31\x46\x38\x39\x45\x44\x37\x39\x43\x31\x42\x45\x39\x46\x33\x32\x32\x43\x38\x35\x37\x38\x42\x39\x37"
           "\x38\x34\x31\x46\x31\x43\x42\x41\x41\x31\x37\x44\x39\x30\x31\x42\x45\x31\x32\x33\x30\x45\x33\x43\x30\x30\x45\x31\x43\x36\x34\x33\x41\x46\x33\x32\x36\x33\x38\x42\x35\x36\x37\x34\x45\x30\x31\x46\x45\x41"
           "\x39\x36\x46\x43\x39\x30\x38\x36\x34\x45\x36\x32\x31\x42\x38\x35\x36\x41\x39\x45\x31\x43\x45\x35\x36\x45\x36\x45\x42\x35\x34\x35\x42\x39\x43\x32\x46\x38\x46\x30\x43\x43\x31\x30\x44\x44\x41\x38\x38\x44"
           "\x43\x43\x36\x44\x32\x38\x32\x36\x30\x35\x46\x38\x44\x42\x36\x37\x30\x34\x34\x46\x32\x44\x46\x44\x33\x36\x39\x35\x45\x37\x42\x41\x36\x33\x38\x37\x37\x41\x45\x31\x36\x37\x30\x31\x35\x33\x36\x41\x45\x36"
           "\x35\x36\x37\x43\x37\x39\x34\x44\x30\x42\x46\x45\x33\x33\x38\x44\x46\x42\x42\x34\x32\x44\x39\x32\x44\x34\x32\x31\x35\x41\x46\x33\x42\x42\x32\x32\x42\x46\x30\x41\x38\x42\x32\x38\x33\x46\x44\x44\x43\x32"
           "\x43\x36\x36\x37\x41\x31\x30\x39\x35\x38\x45\x41\x36\x44\x32", buffer);

  bignum.AssignBignum(bignum2);
  bignum.MultiplyByPowerOfTen(1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x36\x38\x38\x41\x38\x46\x38\x34\x46\x44\x31\x41\x42\x39\x34\x39\x39\x33\x30\x32\x36\x31\x43\x30\x39\x38\x36\x44\x42\x34\x44\x46\x39\x33\x31\x45\x38\x35\x41\x38\x41\x44\x32\x46\x41\x38\x39\x32\x31\x32\x38\x34\x45\x45\x31\x43\x32\x42\x43\x35\x31"
           "\x45\x35\x35\x39\x31\x35\x38\x32\x33\x42\x42\x41\x35\x37\x38\x39\x45\x37\x45\x43\x39\x39\x45\x33\x32\x36\x45\x45\x45\x36\x39\x46\x35\x34\x33\x45\x43\x45\x38\x39\x30\x39\x32\x39\x44\x45\x44\x39\x41\x43\x37\x39\x34\x38\x39\x38\x38\x34\x42\x45\x35\x37"
           "\x36\x33\x30\x41\x44\x35\x36\x39\x45\x31\x32\x31\x42\x42\x37\x36\x45\x44\x38\x44\x41\x43\x38\x46\x42\x35\x34\x35\x41\x38\x41\x46\x44\x41\x44\x46\x31\x46\x38\x38\x36\x30\x35\x39\x39\x41\x46\x43\x34\x37\x41\x39\x33\x42\x36\x33\x34\x36\x43\x31\x39\x31"
           "\x37\x32\x33\x37\x46\x35\x42\x44\x33\x36\x42\x37\x33\x45\x42\x32\x39\x33\x37\x31\x46\x34\x41\x34\x45\x45\x37\x41\x31\x31\x36\x43\x42\x35\x45\x38\x45\x35\x38\x30\x38\x44\x31\x42\x45\x41\x34\x44\x37\x46\x37\x45\x33\x37\x31\x36\x30\x39\x30\x43\x31\x33"
           "\x46\x32\x39\x45\x35\x44\x44\x41\x35\x33\x46\x30\x46\x44\x35\x31\x33\x33\x36\x32\x41\x32\x44\x32\x30\x46\x36\x35\x30\x35\x33\x31\x34\x42\x39\x34\x31\x39\x44\x42\x39\x36\x37\x46\x38\x41\x38\x41\x38\x39\x35\x38\x39\x46\x43\x34\x33\x39\x31\x37\x43\x33"
           "\x42\x42\x38\x39\x32\x30\x36\x32\x42\x31\x37\x43\x42\x45\x34\x32\x31\x44\x42\x30\x44\x34\x37\x45\x33\x34\x41\x43\x43\x43\x45\x30\x36\x30\x44\x34\x32\x32\x43\x46\x46\x36\x30\x44\x43\x42\x44\x30\x32\x37\x37\x45\x45\x30\x33\x38\x42\x44\x35\x30\x39\x43"
           "\x37\x42\x43\x34\x39\x34\x44\x38\x44\x38\x35\x34\x46\x35\x42\x37\x36\x36\x39\x36\x46\x39\x32\x37\x45\x41\x39\x39\x42\x43\x30\x30\x43\x34\x41\x35\x44\x37\x39\x32\x38\x34\x33\x34", buffer);

  bignum.AssignBignum(bignum2);
  bignum.MultiplyByPowerOfTen(2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x38\x31\x35\x36\x39\x39\x42\x33\x31\x45\x33\x30\x42\x33\x43\x44\x46\x42\x45\x31\x37\x44\x31\x38\x35\x46\x34\x34\x39\x31\x30\x42\x42\x42\x46\x33\x31\x33\x38\x39\x36\x43\x33\x44\x43\x39\x35\x42\x34\x42\x39\x33\x31\x34\x44\x31\x39\x42\x35\x42\x33\x32"
           "\x46\x35\x37\x41\x44\x37\x31\x36\x35\x35\x34\x37\x36\x42\x36\x33\x30\x46\x33\x45\x30\x32\x44\x46\x38\x35\x35\x35\x30\x32\x33\x39\x34\x41\x37\x34\x31\x31\x35\x41\x35\x42\x41\x32\x42\x34\x38\x30\x42\x43\x42\x43\x44\x35\x46\x35\x32\x46\x36\x46\x36\x39\x44"
           "\x45\x36\x43\x35\x36\x32\x32\x43\x42\x35\x31\x35\x32\x41\x35\x34\x37\x38\x38\x42\x44\x39\x44\x31\x34\x42\x38\x39\x36\x44\x45\x38\x43\x42\x37\x33\x42\x35\x33\x43\x33\x38\x30\x30\x44\x44\x41\x43\x43\x39\x43\x35\x31\x45\x30\x43\x33\x38\x46\x41\x45\x37\x36"
           "\x32\x46\x39\x39\x36\x34\x32\x33\x32\x38\x37\x32\x46\x39\x43\x32\x37\x33\x38\x45\x37\x31\x35\x30\x43\x34\x41\x45\x33\x46\x31\x42\x31\x38\x46\x37\x30\x35\x38\x33\x31\x37\x32\x37\x30\x36\x46\x41\x45\x45\x32\x36\x44\x43\x35\x41\x37\x38\x43\x37\x37\x41\x32"
           "\x46\x41\x41\x38\x37\x34\x37\x36\x39\x45\x35\x32\x43\x30\x31\x44\x41\x35\x43\x33\x34\x39\x39\x46\x32\x33\x33\x45\x43\x46\x33\x43\x39\x30\x32\x39\x33\x45\x30\x46\x42\x36\x39\x36\x39\x35\x44\x37\x36\x33\x44\x41\x41\x33\x41\x45\x44\x41\x35\x35\x33\x35\x42"
           "\x34\x33\x44\x41\x45\x45\x44\x46\x36\x45\x39\x35\x32\x38\x45\x38\x34\x43\x45\x45\x30\x45\x43\x30\x30\x30\x43\x33\x43\x38\x34\x39\x35\x43\x31\x46\x39\x43\x38\x39\x46\x36\x32\x31\x38\x41\x46\x34\x43\x32\x33\x37\x36\x35\x32\x36\x31\x43\x44\x35\x41\x44\x44"
           "\x30\x37\x38\x37\x33\x35\x31\x39\x39\x32\x41\x30\x31\x45\x35\x42\x42\x38\x46\x32\x41\x30\x31\x35\x38\x30\x37\x41\x45\x37\x41\x36\x42\x42\x39\x32\x41\x30\x38", buffer);

  bignum.AssignBignum(bignum2);
  bignum.MultiplyByPowerOfTen(5);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x35\x45\x31\x33\x41\x34\x38\x36\x33\x41\x44\x45\x45\x33\x45\x35\x43\x39\x46\x45\x38\x44\x30\x41\x37\x33\x34\x32\x33\x44\x36\x39\x35\x44\x36\x32\x44\x38\x34\x35\x30\x43\x45\x44\x31\x35\x41\x38\x43\x39\x46\x33\x36\x38\x39\x35\x32\x43\x36\x44\x43\x33"
           "\x46\x30\x45\x45\x37\x44\x38\x32\x46\x33\x44\x31\x45\x46\x42\x37\x41\x46\x33\x38\x41\x33\x42\x33\x39\x32\x30\x44\x34\x31\x30\x41\x46\x43\x41\x44\x35\x36\x33\x43\x38\x46\x35\x46\x33\x39\x31\x31\x36\x45\x31\x34\x31\x41\x33\x43\x35\x43\x31\x34\x42\x33"
           "\x35\x38\x43\x44\x37\x33\x30\x37\x37\x45\x41\x33\x35\x41\x41\x44\x35\x39\x46\x36\x45\x32\x34\x41\x44\x39\x38\x46\x31\x30\x44\x35\x35\x35\x35\x41\x42\x42\x46\x42\x46\x33\x33\x41\x43\x33\x36\x31\x45\x41\x46\x34\x32\x39\x46\x44\x35\x46\x42\x45\x39\x34"
           "\x31\x37\x44\x41\x39\x45\x46\x32\x46\x32\x39\x35\x36\x30\x31\x31\x46\x39\x46\x39\x33\x36\x34\x36\x41\x41\x33\x38\x30\x34\x38\x41\x36\x38\x31\x44\x39\x38\x34\x45\x44\x38\x38\x31\x32\x37\x30\x37\x33\x34\x34\x33\x32\x34\x37\x43\x43\x43\x31\x36\x37\x43"
           "\x42\x33\x35\x34\x41\x33\x32\x32\x30\x36\x45\x46\x35\x41\x37\x33\x33\x45\x37\x33\x43\x46\x38\x32\x44\x37\x39\x35\x41\x31\x41\x44\x35\x39\x38\x34\x39\x33\x32\x31\x31\x41\x36\x44\x36\x31\x33\x43\x33\x39\x35\x31\x35\x45\x30\x45\x30\x46\x36\x33\x30\x34"
           "\x44\x43\x44\x39\x43\x38\x31\x30\x46\x33\x35\x31\x38\x43\x37\x46\x36\x41\x37\x43\x42\x36\x43\x38\x31\x45\x39\x39\x45\x30\x32\x46\x43\x43\x36\x35\x45\x38\x46\x44\x42\x37\x42\x37\x41\x45\x39\x37\x33\x30\x36\x43\x43\x31\x36\x41\x38\x36\x33\x31\x43\x45"
           "\x30\x41\x32\x41\x45\x46\x36\x35\x36\x38\x32\x37\x36\x42\x45\x34\x43\x31\x37\x36\x39\x36\x34\x41\x37\x33\x43\x31\x35\x33\x46\x44\x45\x30\x31\x38\x45\x33\x34\x43\x42\x34\x43\x32\x46\x34\x30", buffer);

  bignum.AssignBignum(bignum2);
  bignum.MultiplyByPowerOfTen(10);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x38\x46\x38\x43\x42\x38\x45\x42\x35\x31\x39\x34\x35\x41\x37\x45\x38\x31\x35\x38\x30\x39\x46\x36\x31\x32\x31\x45\x46\x32\x46\x34\x45\x36\x31\x45\x46\x33\x34\x30\x35\x43\x44\x39\x34\x33\x32\x43\x41\x44\x32\x37\x30\x39\x37\x34\x39\x45\x45\x41\x46\x44"
           "\x31\x42\x38\x31\x45\x38\x34\x33\x46\x31\x34\x41\x33\x36\x36\x37\x41\x37\x42\x44\x43\x43\x43\x39\x45\x30\x42\x42\x37\x39\x35\x46\x36\x33\x43\x44\x46\x44\x42\x36\x32\x38\x34\x34\x41\x43\x37\x34\x33\x38\x39\x37\x36\x43\x38\x38\x35\x41\x30\x31\x31\x36"
           "\x32\x39\x36\x30\x37\x44\x41\x35\x34\x46\x39\x43\x30\x32\x33\x43\x43\x33\x36\x36\x35\x37\x30\x42\x37\x36\x33\x37\x45\x44\x30\x46\x38\x35\x35\x44\x39\x33\x31\x37\x35\x32\x30\x33\x38\x41\x36\x31\x34\x39\x32\x32\x44\x30\x39\x32\x33\x45\x33\x38\x32\x43"
           "\x42\x38\x45\x35\x46\x36\x43\x39\x37\x35\x36\x37\x32\x44\x42\x37\x36\x45\x30\x44\x45\x34\x37\x31\x39\x33\x37\x42\x42\x39\x45\x44\x42\x31\x31\x45\x32\x38\x38\x37\x34\x46\x31\x43\x31\x32\x32\x44\x35\x45\x31\x45\x46\x33\x38\x43\x45\x43\x45\x39\x44\x30"
           "\x30\x37\x32\x33\x30\x35\x36\x42\x43\x42\x44\x34\x46\x39\x36\x34\x31\x39\x32\x42\x37\x36\x38\x33\x30\x36\x33\x34\x42\x31\x44\x33\x32\x32\x42\x37\x45\x42\x30\x30\x36\x32\x46\x33\x32\x36\x37\x45\x38\x34\x46\x35\x43\x38\x32\x34\x33\x34\x33\x41\x37\x37"
           "\x34\x42\x37\x44\x43\x45\x45\x36\x44\x44\x34\x36\x34\x46\x30\x31\x45\x42\x44\x43\x38\x43\x36\x37\x31\x42\x42\x31\x38\x42\x42\x34\x45\x46\x34\x33\x30\x30\x41\x34\x32\x34\x37\x34\x41\x36\x43\x37\x37\x32\x34\x33\x46\x32\x41\x31\x32\x42\x30\x33\x42\x46"
           "\x30\x34\x34\x33\x43\x33\x38\x41\x31\x43\x30\x44\x32\x37\x30\x31\x45\x44\x42\x33\x39\x33\x31\x33\x35\x41\x45\x30\x44\x45\x43\x39\x34\x32\x31\x31\x46\x39\x44\x34\x45\x42\x35\x31\x46\x39\x39\x30\x38\x30\x30", buffer);

  bignum.AssignBignum(bignum2);
  bignum.MultiplyByPowerOfTen(50);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x37\x41\x38\x42\x45\x33\x34\x35\x45\x32\x34\x34\x30\x37\x33\x37\x32\x46\x43\x31\x44\x45\x34\x34\x32\x43\x42\x41\x36\x39\x36\x42\x43\x32\x33\x43\x34\x46\x46\x44\x35\x42\x34\x42\x44\x46\x44\x39\x45\x35\x43\x33\x39\x35\x35\x39\x38\x31\x35"
           "\x38\x36\x36\x32\x38\x43\x46\x38\x34\x37\x32\x44\x32\x44\x35\x38\x39\x46\x32\x46\x43\x32\x42\x41\x44\x36\x45\x30\x38\x31\x36\x45\x43\x37\x32\x43\x42\x46\x38\x35\x43\x43\x41\x36\x36\x33\x44\x38\x41\x31\x45\x43\x36\x43\x35\x31\x30\x37\x36\x44\x38"
           "\x32\x44\x32\x34\x37\x45\x36\x43\x32\x36\x38\x31\x31\x42\x37\x45\x43\x34\x44\x34\x33\x30\x30\x46\x42\x31\x46\x39\x31\x30\x32\x38\x44\x43\x42\x37\x42\x32\x43\x34\x45\x37\x41\x36\x30\x43\x31\x35\x31\x31\x36\x31\x41\x41\x37\x45\x36\x35\x45\x37\x39"
           "\x42\x34\x30\x39\x31\x37\x42\x31\x32\x42\x32\x42\x35\x46\x42\x45\x37\x37\x34\x35\x39\x38\x34\x44\x34\x45\x38\x45\x46\x41\x33\x31\x46\x39\x41\x45\x36\x30\x36\x32\x34\x32\x37\x42\x30\x36\x38\x42\x31\x34\x34\x41\x39\x43\x42\x31\x35\x35\x38\x37\x33"
           "\x45\x37\x43\x30\x43\x39\x46\x30\x31\x31\x35\x45\x35\x41\x43\x37\x32\x44\x43\x35\x41\x37\x33\x43\x34\x37\x39\x36\x44\x42\x39\x37\x30\x42\x46\x39\x32\x30\x35\x41\x42\x38\x43\x37\x37\x41\x36\x39\x39\x36\x45\x42\x31\x42\x34\x31\x37\x46\x39\x44\x31"
           "\x36\x32\x33\x32\x34\x33\x31\x45\x36\x33\x31\x33\x43\x33\x39\x32\x32\x30\x33\x36\x30\x31\x42\x39\x43\x32\x32\x43\x43\x31\x30\x44\x44\x41\x38\x38\x44\x43\x43\x36\x44\x32\x38\x32\x36\x30\x35\x46\x38\x44\x42\x36\x37\x30\x34\x34\x46\x32\x44\x46\x44"
           "\x33\x36\x39\x35\x45\x37\x42\x41\x36\x33\x38\x37\x37\x41\x45\x31\x36\x37\x30\x31\x35\x33\x36\x41\x45\x36\x35\x36\x37\x43\x37\x39\x34\x44\x30\x42\x46\x45\x33\x33\x38\x44\x46\x42\x42\x34\x32\x44\x39\x32\x34\x43\x46\x39\x36\x34\x42\x44\x32\x43\x30"
           "\x46\x35\x38\x36\x45\x30\x33\x41\x32\x46\x43\x44\x33\x35\x41\x34\x30\x38\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignBignum(bignum2);
  bignum.MultiplyByPowerOfTen(100);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x34\x36\x37\x38\x34\x41\x39\x30\x41\x43\x44\x30\x45\x44\x33\x45\x37\x37\x35\x39\x43\x43\x35\x38\x35\x46\x42\x33\x32\x44\x33\x36\x45\x42\x36\x30\x33\x34\x41\x36\x46\x37\x38\x44\x39\x32\x36\x30\x34\x45\x33\x42\x41\x41\x35\x45\x44\x33\x44\x38\x42"
           "\x36\x45\x36\x30\x45\x38\x35\x34\x34\x33\x39\x42\x45\x34\x34\x38\x38\x39\x37\x46\x42\x34\x42\x37\x45\x41\x35\x41\x33\x44\x38\x37\x33\x41\x41\x30\x46\x43\x42\x33\x43\x46\x46\x44\x38\x30\x44\x30\x35\x33\x30\x38\x38\x30\x45\x34\x35\x46\x35\x31\x31"
           "\x37\x32\x32\x41\x35\x30\x43\x45\x37\x45\x30\x35\x38\x42\x35\x41\x36\x46\x35\x34\x36\x34\x44\x42\x37\x35\x30\x30\x45\x33\x34\x39\x38\x34\x45\x45\x33\x32\x30\x32\x41\x39\x34\x34\x31\x46\x34\x34\x46\x41\x31\x35\x35\x34\x43\x30\x43\x45\x41\x39\x36"
           "\x42\x34\x33\x38\x41\x33\x36\x46\x32\x35\x45\x37\x43\x39\x44\x35\x36\x44\x37\x31\x41\x45\x32\x43\x44\x33\x31\x33\x45\x43\x33\x37\x35\x33\x34\x44\x41\x32\x39\x39\x41\x43\x30\x38\x35\x34\x46\x43\x34\x38\x35\x39\x31\x41\x37\x43\x46\x33\x31\x37\x31"
           "\x33\x31\x32\x36\x35\x41\x41\x34\x41\x45\x36\x32\x44\x45\x33\x32\x33\x34\x34\x43\x45\x37\x42\x45\x45\x45\x46\x38\x39\x34\x41\x45\x36\x38\x36\x41\x32\x44\x41\x41\x46\x45\x35\x44\x36\x44\x39\x41\x31\x30\x39\x37\x31\x46\x46\x44\x39\x43\x30\x36\x34"
           "\x35\x30\x37\x39\x42\x32\x30\x39\x45\x31\x30\x34\x38\x46\x35\x38\x42\x35\x31\x39\x32\x44\x34\x31\x44\x38\x34\x33\x33\x36\x41\x43\x34\x43\x38\x43\x34\x38\x39\x45\x45\x46\x30\x30\x39\x33\x39\x43\x46\x43\x39\x44\x35\x35\x43\x31\x32\x32\x30\x33\x36"
           "\x30\x31\x42\x39\x43\x32\x32\x43\x43\x31\x30\x44\x44\x41\x38\x38\x44\x43\x43\x36\x44\x32\x38\x32\x36\x30\x35\x46\x38\x44\x42\x36\x37\x30\x34\x34\x46\x32\x44\x46\x44\x33\x36\x39\x35\x45\x37\x42\x41\x33\x46\x36\x37\x42\x39\x36\x44\x33\x41\x33\x32"
           "\x45\x31\x31\x46\x42\x35\x35\x36\x31\x42\x36\x38\x37\x34\x34\x43\x34\x30\x33\x35\x42\x30\x38\x30\x30\x44\x43\x31\x36\x36\x44\x34\x39\x44\x39\x38\x45\x33\x46\x44\x31\x44\x35\x42\x42\x32\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignBignum(bignum2);
  bignum.MultiplyByPowerOfTen(200);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x35\x30\x38\x42\x44\x33\x35\x31\x32\x32\x31\x44\x46\x31\x33\x39\x44\x37\x32\x44\x38\x38\x43\x44\x43\x30\x34\x31\x36\x38\x34\x35\x41\x35\x33\x45\x45\x32\x44\x30\x45\x36\x42\x39\x38\x33\x35\x32\x35\x30\x39\x41\x39\x41\x43\x33\x31\x32\x46\x38\x43"
           "\x36\x43\x42\x31\x41\x31\x34\x34\x38\x38\x39\x34\x31\x36\x32\x30\x31\x45\x30\x42\x36\x43\x45\x36\x36\x45\x41\x33\x45\x42\x45\x32\x35\x39\x42\x35\x46\x44\x37\x39\x45\x43\x46\x43\x31\x46\x44\x37\x37\x39\x36\x33\x43\x45\x35\x31\x36\x43\x43\x37\x45"
           "\x32\x46\x45\x37\x33\x44\x34\x42\x35\x42\x37\x31\x30\x43\x31\x39\x46\x36\x42\x43\x42\x30\x39\x32\x43\x37\x41\x32\x46\x44\x37\x36\x32\x38\x36\x35\x34\x33\x42\x38\x44\x42\x44\x32\x43\x35\x39\x36\x44\x46\x46\x32\x43\x38\x39\x36\x37\x32\x30\x42\x41"
           "\x44\x46\x46\x37\x42\x43\x39\x43\x33\x36\x36\x41\x43\x45\x41\x33\x41\x38\x38\x30\x41\x45\x43\x32\x38\x37\x43\x35\x45\x36\x32\x30\x37\x44\x46\x32\x37\x33\x39\x42\x35\x33\x32\x36\x46\x43\x31\x39\x44\x37\x37\x33\x42\x44\x38\x33\x30\x42\x31\x30\x39"
           "\x45\x44\x33\x36\x43\x37\x30\x38\x36\x35\x34\x34\x42\x46\x38\x46\x44\x42\x39\x44\x34\x42\x37\x33\x37\x31\x39\x43\x32\x42\x35\x42\x43\x32\x46\x35\x37\x31\x41\x35\x39\x33\x37\x45\x43\x34\x36\x38\x37\x36\x43\x44\x34\x32\x38\x32\x38\x31\x46\x36\x42"
           "\x46\x32\x38\x37\x45\x31\x45\x30\x37\x46\x32\x35\x43\x31\x42\x31\x44\x34\x36\x42\x43\x33\x37\x33\x32\x34\x46\x46\x36\x35\x37\x41\x38\x42\x32\x45\x30\x30\x37\x31\x44\x42\x38\x33\x42\x38\x36\x31\x32\x33\x43\x41\x33\x34\x30\x30\x34\x46\x34\x30\x36"
           "\x30\x30\x31\x30\x38\x32\x44\x37\x39\x34\x35\x45\x39\x30\x43\x36\x45\x38\x43\x39\x41\x39\x46\x45\x43\x32\x42\x34\x34\x42\x45\x30\x44\x44\x41\x34\x36\x45\x39\x46\x35\x32\x42\x31\x35\x32\x45\x34\x44\x31\x33\x33\x36\x44\x32\x46\x43\x46\x42\x43\x39"
           "\x39\x36\x45\x33\x30\x43\x41\x30\x30\x38\x32\x32\x35\x36\x37\x33\x37\x33\x36\x35\x31\x35\x38\x46\x45\x33\x36\x34\x38\x32\x41\x41\x37\x45\x42\x39\x44\x41\x46\x32\x41\x42\x31\x32\x38\x46\x31\x30\x45\x37\x35\x35\x31\x41\x33\x43\x44\x35\x42\x45\x36"
           "\x30\x41\x39\x32\x32\x46\x33\x41\x37\x44\x35\x45\x45\x44\x33\x38\x42\x36\x33\x34\x41\x37\x45\x43\x39\x35\x42\x43\x46\x37\x30\x32\x31\x42\x41\x36\x38\x32\x30\x41\x32\x39\x32\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignBignum(bignum2);
  bignum.MultiplyByPowerOfTen(500);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x37\x38\x34\x35\x46\x39\x30\x30\x45\x34\x37\x35\x42\x35\x30\x38\x36\x38\x38\x35\x42\x41\x41\x41\x45\x36\x37\x43\x38\x45\x38\x35\x31\x38\x35\x41\x43\x46\x45\x34\x36\x33\x33\x37\x32\x37\x46\x38\x32\x41\x34\x42\x30\x36\x42\x35\x35\x38\x32\x41\x43"
           "\x42\x45\x39\x33\x33\x43\x35\x33\x33\x35\x37\x44\x41\x30\x43\x39\x38\x43\x32\x30\x43\x35\x41\x43\x39\x30\x30\x43\x34\x44\x37\x36\x41\x39\x37\x32\x34\x37\x44\x46\x35\x32\x42\x37\x39\x46\x34\x38\x46\x39\x45\x33\x35\x38\x34\x30\x46\x42\x37\x31\x35"
           "\x44\x33\x39\x32\x43\x45\x33\x30\x33\x45\x32\x32\x36\x32\x32\x42\x30\x43\x46\x38\x32\x44\x39\x34\x37\x31\x42\x33\x39\x38\x34\x35\x37\x44\x44\x33\x31\x39\x36\x46\x36\x33\x39\x43\x45\x45\x38\x42\x42\x44\x32\x43\x31\x34\x36\x38\x37\x33\x38\x34\x31"
           "\x46\x30\x36\x39\x39\x45\x36\x43\x34\x31\x46\x30\x34\x46\x43\x37\x41\x35\x34\x42\x34\x38\x43\x45\x42\x39\x39\x35\x42\x45\x42\x36\x46\x35\x30\x46\x45\x38\x31\x44\x45\x39\x44\x38\x37\x41\x38\x44\x37\x46\x38\x34\x39\x43\x43\x35\x32\x33\x35\x35\x33"
           "\x37\x42\x37\x42\x42\x42\x43\x31\x43\x37\x43\x41\x41\x46\x46\x36\x45\x39\x36\x35\x30\x42\x45\x30\x33\x42\x33\x30\x38\x43\x36\x44\x33\x31\x30\x31\x32\x41\x45\x46\x39\x35\x38\x30\x46\x37\x30\x44\x33\x45\x45\x32\x30\x38\x33\x41\x44\x45\x31\x32\x36"
           "\x38\x39\x34\x30\x46\x41\x37\x44\x36\x33\x30\x38\x45\x32\x33\x39\x37\x37\x35\x44\x46\x44\x32\x46\x38\x43\x39\x37\x46\x46\x37\x45\x42\x44\x35\x32\x35\x44\x41\x46\x41\x36\x35\x31\x32\x32\x31\x36\x46\x37\x30\x34\x37\x41\x36\x32\x41\x39\x33\x44\x43"
           "\x33\x38\x41\x30\x31\x36\x35\x42\x44\x43\x36\x37\x45\x32\x35\x30\x44\x43\x43\x39\x36\x41\x30\x31\x38\x31\x44\x45\x39\x33\x35\x41\x37\x30\x42\x33\x38\x37\x30\x34\x44\x43\x37\x31\x38\x31\x39\x46\x30\x32\x46\x43\x35\x32\x36\x31\x46\x46\x37\x45\x31"
           "\x45\x35\x46\x31\x31\x39\x30\x37\x36\x37\x38\x42\x30\x41\x33\x45\x35\x31\x39\x46\x46\x34\x43\x31\x30\x41\x38\x36\x37\x42\x30\x43\x32\x36\x43\x45\x30\x32\x42\x45\x36\x39\x36\x30\x42\x41\x38\x36\x32\x31\x41\x38\x37\x33\x30\x33\x43\x31\x30\x31\x43"
           "\x33\x46\x38\x38\x37\x39\x38\x42\x42\x39\x46\x37\x37\x33\x39\x36\x35\x35\x39\x34\x36\x46\x38\x42\x35\x37\x34\x34\x45\x36\x42\x31\x45\x41\x46\x31\x30\x42\x30\x43\x35\x36\x32\x31\x33\x33\x30\x46\x30\x30\x37\x39\x32\x30\x39\x30\x33\x33\x43\x36\x39"
           "\x32\x30\x44\x45\x32\x45\x32\x43\x38\x44\x33\x32\x34\x46\x30\x36\x32\x34\x34\x36\x33\x37\x33\x35\x44\x34\x38\x32\x42\x46\x32\x39\x31\x39\x32\x36\x43\x32\x32\x41\x39\x31\x30\x46\x35\x42\x38\x30\x46\x41\x32\x35\x31\x37\x30\x42\x36\x42\x35\x37\x44"
           "\x38\x44\x35\x39\x32\x38\x43\x37\x42\x43\x41\x33\x46\x45\x38\x37\x34\x36\x31\x32\x37\x35\x46\x36\x39\x42\x44\x35\x41\x31\x42\x38\x33\x31\x38\x31\x44\x41\x41\x46\x34\x33\x45\x30\x35\x46\x43\x33\x43\x37\x32\x43\x34\x45\x39\x33\x31\x31\x31\x42\x36"
           "\x36\x32\x30\x35\x45\x42\x46\x34\x39\x42\x32\x38\x46\x45\x44\x46\x42\x37\x45\x37\x35\x32\x36\x43\x42\x44\x41\x36\x35\x38\x41\x33\x33\x32\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
           "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);
}


TEST(DivideModuloIntBignum) {
  char buffer[kBufferSize];
  Bignum bignum;
  Bignum other;
  Bignum third;

  bignum.AssignUInt16(10);
  other.AssignUInt16(2);
  CHECK_EQ(5, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x30", buffer);

  bignum.AssignUInt16(10);
  bignum.ShiftLeft(500);
  other.AssignUInt16(2);
  other.ShiftLeft(500);
  CHECK_EQ(5, bignum.DivideModuloIntBignum(other));
  CHECK_EQ("\x30", buffer);

  bignum.AssignUInt16(11);
  other.AssignUInt16(2);
  CHECK_EQ(5, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignUInt16(10);
  bignum.ShiftLeft(500);
  other.AssignUInt16(1);
  bignum.AddBignum(other);
  other.AssignUInt16(2);
  other.ShiftLeft(500);
  CHECK_EQ(5, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignUInt16(10);
  bignum.ShiftLeft(500);
  other.AssignBignum(bignum);
  bignum.MultiplyByUInt32(0x1234);
  third.AssignUInt16(0xFFF);
  bignum.AddBignum(third);
  CHECK_EQ(0x1234, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46", buffer);

  bignum.AssignUInt16(10);
  AssignHexString(&other, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  CHECK_EQ(0, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41", buffer);

  AssignHexString(&bignum, "\x31\x32\x33\x34\x35\x36\x37\x38");
  AssignHexString(&other, "\x33\x37\x38\x39\x30\x31\x32");
  CHECK_EQ(5, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x44\x39\x38\x36\x31\x45", buffer);

  AssignHexString(&bignum, "\x37\x30\x30\x30\x30\x30\x30\x31");
  AssignHexString(&other, "\x31\x46\x46\x46\x46\x46\x46\x46");
  CHECK_EQ(3, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x34", buffer);

  AssignHexString(&bignum, "\x32\x38\x30\x30\x30\x30\x30\x30");
  AssignHexString(&other, "\x31\x32\x41\x30\x35\x46\x32\x30");
  CHECK_EQ(2, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x42\x46\x34\x31\x43\x30", buffer);

  bignum.AssignUInt16(10);
  bignum.ShiftLeft(500);
  other.AssignBignum(bignum);
  bignum.MultiplyByUInt32(0x1234);
  third.AssignUInt16(0xFFF);
  other.SubtractBignum(third);
  CHECK_EQ(0x1234, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x32\x44\x43\x43", buffer);
  CHECK_EQ(0, bignum.DivideModuloIntBignum(other));
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x32\x33\x32\x44\x43\x43", buffer);
}


TEST(Compare) {
  Bignum bignum1;
  Bignum bignum2;
  bignum1.AssignUInt16(1);
  bignum2.AssignUInt16(1);
  CHECK_EQ(0, Bignum::Compare(bignum1, bignum2));
  CHECK(Bignum::Equal(bignum1, bignum2));
  CHECK(Bignum::LessEqual(bignum1, bignum2));
  CHECK(!Bignum::Less(bignum1, bignum2));

  bignum1.AssignUInt16(0);
  bignum2.AssignUInt16(1);
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));
  CHECK(!Bignum::Equal(bignum1, bignum2));
  CHECK(!Bignum::Equal(bignum2, bignum1));
  CHECK(Bignum::LessEqual(bignum1, bignum2));
  CHECK(!Bignum::LessEqual(bignum2, bignum1));
  CHECK(Bignum::Less(bignum1, bignum2));
  CHECK(!Bignum::Less(bignum2, bignum1));

  AssignHexString(&bignum1, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  AssignHexString(&bignum2, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(0, Bignum::Compare(bignum1, bignum2));

  AssignHexString(&bignum1, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  AssignHexString(&bignum2, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x36");
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));

  AssignHexString(&bignum1, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  bignum1.ShiftLeft(500);
  AssignHexString(&bignum2, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  bignum2.ShiftLeft(500);
  CHECK_EQ(0, Bignum::Compare(bignum1, bignum2));

  AssignHexString(&bignum1, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  bignum1.ShiftLeft(500);
  AssignHexString(&bignum2, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x36");
  bignum2.ShiftLeft(500);
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));

  bignum1.AssignUInt16(1);
  bignum1.ShiftLeft(64);
  AssignHexString(&bignum2, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  CHECK_EQ(0, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(0, Bignum::Compare(bignum2, bignum1));

  bignum1.AssignUInt16(1);
  bignum1.ShiftLeft(64);
  AssignHexString(&bignum2, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31");
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));

  bignum1.AssignUInt16(1);
  bignum1.ShiftLeft(96);
  AssignHexString(&bignum2, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31");
  bignum2.ShiftLeft(32);
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));

  AssignHexString(&bignum1, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum2.AssignUInt16(1);
  bignum2.ShiftLeft(64);
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));

  AssignHexString(&bignum1, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum1.ShiftLeft(32);
  bignum2.AssignUInt16(1);
  bignum2.ShiftLeft(96);
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));

  AssignHexString(&bignum1, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum1.ShiftLeft(32);
  bignum2.AssignUInt16(1);
  bignum2.ShiftLeft(95);
  CHECK_EQ(+1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(-1, Bignum::Compare(bignum2, bignum1));

  AssignHexString(&bignum1, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum1.ShiftLeft(32);
  bignum2.AssignUInt16(1);
  bignum2.ShiftLeft(100);
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));

  AssignHexString(&bignum1, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum2.AssignUInt16(1);
  bignum2.ShiftLeft(14*4);
  CHECK_EQ(0, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(0, Bignum::Compare(bignum2, bignum1));

  AssignHexString(&bignum1, "\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31");
  bignum2.AssignUInt16(1);
  bignum2.ShiftLeft(14*4);
  CHECK_EQ(+1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(-1, Bignum::Compare(bignum2, bignum1));

  AssignHexString(&bignum1, "\x32\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30");
  bignum2.AssignUInt16(3);
  bignum2.ShiftLeft(14*4);
  CHECK_EQ(-1, Bignum::Compare(bignum1, bignum2));
  CHECK_EQ(+1, Bignum::Compare(bignum2, bignum1));
}


TEST(PlusCompare) {
  Bignum a;
  Bignum b;
  Bignum c;
  a.AssignUInt16(1);
  b.AssignUInt16(0);
  c.AssignUInt16(1);
  CHECK_EQ(0, Bignum::PlusCompare(a, b, c));
  CHECK(Bignum::PlusEqual(a, b, c));
  CHECK(Bignum::PlusLessEqual(a, b, c));
  CHECK(!Bignum::PlusLess(a, b, c));

  a.AssignUInt16(0);
  b.AssignUInt16(0);
  c.AssignUInt16(1);
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));
  CHECK_EQ(+1, Bignum::PlusCompare(c, b, a));
  CHECK(!Bignum::PlusEqual(a, b, c));
  CHECK(!Bignum::PlusEqual(c, b, a));
  CHECK(Bignum::PlusLessEqual(a, b, c));
  CHECK(!Bignum::PlusLessEqual(c, b, a));
  CHECK(Bignum::PlusLess(a, b, c));
  CHECK(!Bignum::PlusLess(c, b, a));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.AssignUInt16(1);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(+1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x34");
  b.AssignUInt16(1);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(0, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(0, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x34");
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x36");
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x31");
  a.ShiftLeft(11*4);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x38\x39");
  a.ShiftLeft(11*4);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  c.ShiftLeft(32);
  CHECK_EQ(0, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x34");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  c.ShiftLeft(32);
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x36");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  c.ShiftLeft(32);
  CHECK_EQ(1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x31");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  c.ShiftLeft(32);
  CHECK_EQ(1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x38\x39");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  c.ShiftLeft(32);
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x30\x30\x30\x30\x30");
  CHECK_EQ(0, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x34");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x30\x30\x30\x30\x30");
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x36");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x30\x30\x30\x30\x30");
  CHECK_EQ(1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x31");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x30\x30\x30\x30\x30");
  CHECK_EQ(1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x38\x39");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.ShiftLeft(32);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x30\x30\x30\x30\x30");
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x30\x30\x30\x30\x30\x30\x30\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(0, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x36");
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x30\x30\x30\x30\x30\x30\x30\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x34");
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x30\x30\x30\x30\x30\x30\x30\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.ShiftLeft(16);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x30\x30\x30\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x30");
  CHECK_EQ(0, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x34");
  b.ShiftLeft(16);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x30\x30\x30\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x30");
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35");
  b.ShiftLeft(16);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x30\x30\x30\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x31");
  CHECK_EQ(-1, Bignum::PlusCompare(a, b, c));

  AssignHexString(&a, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30");
  a.ShiftLeft(11*4 + 32);
  AssignHexString(&b, "\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x36");
  b.ShiftLeft(16);
  AssignHexString(&c, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x30\x30\x30\x30\x41\x42\x43\x44\x45\x46\x31\x32\x33\x34\x35\x30\x30\x30\x30");
  CHECK_EQ(+1, Bignum::PlusCompare(a, b, c));
}


TEST(Square) {
  Bignum bignum;
  char buffer[kBufferSize];

  bignum.AssignUInt16(1);
  bignum.Square();
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignUInt16(2);
  bignum.Square();
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x34", buffer);

  bignum.AssignUInt16(10);
  bignum.Square();
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x36\x34", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46");
  bignum.Square();
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x45\x30\x30\x30\x30\x30\x30\x31", buffer);

  AssignHexString(&bignum, "\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46");
  bignum.Square();
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x46\x45\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x31", buffer);
}


TEST(AssignPowerUInt16) {
  Bignum bignum;
  char buffer[kBufferSize];

  bignum.AssignPowerUInt16(1, 0);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignPowerUInt16(1, 1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignPowerUInt16(1, 2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignPowerUInt16(2, 0);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignPowerUInt16(2, 1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32", buffer);

  bignum.AssignPowerUInt16(2, 2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x34", buffer);

  bignum.AssignPowerUInt16(16, 1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30", buffer);

  bignum.AssignPowerUInt16(16, 2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30", buffer);

  bignum.AssignPowerUInt16(16, 5);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30", buffer);

  bignum.AssignPowerUInt16(16, 8);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignPowerUInt16(16, 16);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignPowerUInt16(16, 30);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignPowerUInt16(10, 0);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignPowerUInt16(10, 1);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x41", buffer);

  bignum.AssignPowerUInt16(10, 2);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x36\x34", buffer);

  bignum.AssignPowerUInt16(10, 5);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x38\x36\x41\x30", buffer);

  bignum.AssignPowerUInt16(10, 8);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x35\x46\x35\x45\x31\x30\x30", buffer);

  bignum.AssignPowerUInt16(10, 16);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x32\x33\x38\x36\x46\x32\x36\x46\x43\x31\x30\x30\x30\x30", buffer);

  bignum.AssignPowerUInt16(10, 30);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x43\x39\x46\x32\x43\x39\x43\x44\x30\x34\x36\x37\x34\x45\x44\x45\x41\x34\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignPowerUInt16(10, 31);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x37\x45\x33\x37\x42\x45\x32\x30\x32\x32\x43\x30\x39\x31\x34\x42\x32\x36\x38\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignPowerUInt16(2, 0);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignPowerUInt16(2, 100);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", buffer);

  bignum.AssignPowerUInt16(17, 0);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31", buffer);

  bignum.AssignPowerUInt16(17, 99);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x31\x39\x34\x32\x42\x42\x39\x38\x35\x33\x46\x41\x44\x39\x32\x34\x41\x33\x44\x34\x44\x44\x39\x32\x42\x38\x39\x42\x39\x34\x30\x45\x30\x32\x30\x37\x42\x45\x46\x30\x35\x44\x42\x39\x43\x32\x36\x42\x43\x31\x42\x37\x35\x37"
           "\x38\x30\x42\x45\x30\x43\x35\x41\x32\x43\x32\x39\x39\x30\x45\x30\x32\x41\x36\x38\x31\x32\x32\x34\x46\x33\x34\x45\x44\x36\x38\x35\x35\x38\x43\x45\x34\x43\x36\x45\x33\x33\x37\x36\x30\x39\x33\x31",
           buffer);

  bignum.AssignPowerUInt16(0xFFFF, 99);
  CHECK(bignum.ToHexString(buffer, kBufferSize));
  CHECK_EQ("\x46\x46\x39\x44\x31\x32\x46\x30\x39\x42\x38\x38\x36\x43\x35\x34\x45\x37\x37\x45\x37\x34\x33\x39\x43\x37\x44\x32\x44\x45\x44\x32\x44\x33\x34\x46\x36\x36\x39\x36\x35\x34\x43\x30\x43\x32\x42\x36\x42\x38\x43\x32\x38\x38\x32\x35\x30"
           "\x35\x41\x32\x32\x31\x31\x44\x30\x45\x33\x44\x43\x39\x41\x36\x31\x38\x33\x31\x33\x34\x39\x45\x41\x45\x36\x37\x34\x42\x31\x31\x44\x35\x36\x45\x33\x30\x34\x39\x44\x37\x42\x44\x37\x39\x44\x41\x41\x44\x36\x43\x39\x46\x41\x32\x42\x41"
           "\x35\x32\x38\x45\x33\x41\x37\x39\x34\x32\x39\x39\x46\x32\x45\x45\x39\x31\x34\x36\x41\x33\x32\x34\x44\x41\x46\x45\x33\x45\x38\x38\x39\x36\x37\x41\x30\x33\x35\x38\x32\x33\x33\x42\x35\x34\x33\x45\x32\x33\x33\x45\x35\x37\x35\x42\x39"
           "\x44\x44\x34\x45\x33\x41\x41\x37\x39\x34\x32\x31\x34\x36\x34\x32\x36\x43\x33\x32\x38\x46\x46\x35\x35\x42\x46\x44\x35\x43\x34\x35\x45\x30\x39\x30\x31\x42\x31\x36\x32\x39\x32\x36\x30\x41\x46\x39\x41\x45\x32\x46\x33\x31\x30\x43\x35"
           "\x35\x30\x39\x35\x39\x46\x41\x46\x33\x30\x35\x43\x33\x30\x31\x31\x36\x44\x35\x33\x37\x44\x38\x30\x43\x46\x36\x45\x42\x44\x42\x43\x31\x35\x43\x35\x36\x39\x34\x30\x36\x32\x41\x46\x31\x41\x43\x33\x44\x39\x35\x36\x44\x30\x41\x34\x31"
           "\x42\x37\x45\x31\x42\x37\x39\x46\x46\x31\x31\x45\x32\x31\x44\x38\x33\x33\x38\x37\x41\x31\x43\x45\x31\x46\x35\x38\x38\x32\x42\x33\x31\x45\x34\x42\x35\x44\x38\x44\x45\x34\x31\x35\x42\x44\x42\x45\x36\x38\x35\x34\x34\x36\x36\x44\x46"
           "\x33\x34\x33\x33\x36\x32\x32\x36\x37\x41\x37\x45\x38\x38\x33\x33\x31\x31\x39\x44\x33\x31\x44\x30\x32\x45\x31\x38\x44\x42\x35\x42\x30\x45\x38\x46\x36\x41\x36\x34\x42\x30\x45\x44\x30\x44\x30\x30\x36\x32\x46\x46\x46\x46",
           buffer);
}
