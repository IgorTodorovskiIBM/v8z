// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/v8.h"

#include "test/cctest/compiler/function-tester.h"

using namespace v8::internal;
using namespace v8::internal::compiler;

TEST(Throw) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x69\x66\x20\x28\x61\x29\x20\x7b\x20\x74\x68\x72\x6f\x77\x20\x62\x3b\x20\x7d\x20\x65\x6c\x73\x65\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x62\x3b\x20\x7d\x7d\x29");

  T.CheckThrows(T.true_value(), T.NewObject("\x6e\x65\x77\x20\x45\x72\x72\x6f\x72"));
  T.CheckCall(T.Val(23), T.false_value(), T.Val(23));
}


TEST(ThrowSourcePosition) {
  static const char* src =
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x20\x62\x29\x20\x7b\x20\x20\x20\x20\x20\x20\x20\x20\xa"
      "\x20\x20\x69\x66\x20\x28\x61\x20\x3d\x3d\x20\x31\x29\x20\x74\x68\x72\x6f\x77\x20\x31\x3b\x20\x20\x20\xa"
      "\x20\x20\x69\x66\x20\x28\x61\x20\x3d\x3d\x20\x32\x29\x20\x7b\x74\x68\x72\x6f\x77\x20\x32\x7d\x20\x20\xa"
      "\x20\x20\x69\x66\x20\x28\x61\x20\x3d\x3d\x20\x33\x29\x20\x7b\x30\x3b\x74\x68\x72\x6f\x77\x20\x33\x7d\xa"
      "\x20\x20\x74\x68\x72\x6f\x77\x20\x34\x3b\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\xa"
      "\x7d\x29\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20";
  FunctionTester T(src);
  v8::Handle<v8::Message> message;

  message = T.CheckThrowsReturnMessage(T.Val(1), T.undefined());
  CHECK(!message.IsEmpty());
  CHECK_EQ(2, message->GetLineNumber());
  CHECK_EQ(40, message->GetStartPosition());

  message = T.CheckThrowsReturnMessage(T.Val(2), T.undefined());
  CHECK(!message.IsEmpty());
  CHECK_EQ(3, message->GetLineNumber());
  CHECK_EQ(67, message->GetStartPosition());

  message = T.CheckThrowsReturnMessage(T.Val(3), T.undefined());
  CHECK(!message.IsEmpty());
  CHECK_EQ(4, message->GetLineNumber());
  CHECK_EQ(95, message->GetStartPosition());
}
