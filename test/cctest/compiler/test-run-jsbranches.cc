// Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/v8.h"

#include "test/cctest/compiler/function-tester.h"

using namespace v8::internal;
using namespace v8::internal::compiler;

TEST(Conditional) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x20\x3f\x20\x32\x33\x20\x3a\x20\x34\x32\x3b\x20\x7d\x29");

  T.CheckCall(T.Val(23), T.true_value(), T.undefined());
  T.CheckCall(T.Val(42), T.false_value(), T.undefined());
  T.CheckCall(T.Val(42), T.undefined(), T.undefined());
  T.CheckCall(T.Val(42), T.Val(0.0), T.undefined());
  T.CheckCall(T.Val(23), T.Val(999), T.undefined());
  T.CheckCall(T.Val(23), T.Val("\x78"), T.undefined());
}


TEST(LogicalAnd) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x20\x26\x26\x20\x62\x3b\x20\x7d\x29");

  T.CheckCall(T.true_value(), T.true_value(), T.true_value());
  T.CheckCall(T.false_value(), T.false_value(), T.true_value());
  T.CheckCall(T.false_value(), T.true_value(), T.false_value());
  T.CheckCall(T.false_value(), T.false_value(), T.false_value());

  T.CheckCall(T.Val(999), T.Val(777), T.Val(999));
  T.CheckCall(T.Val(0.0), T.Val(0.0), T.Val(999));
  T.CheckCall(T.Val("\x62"), T.Val("\x61"), T.Val("\x62"));
}


TEST(LogicalOr) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x20\x7c\x7c\x20\x62\x3b\x20\x7d\x29");

  T.CheckCall(T.true_value(), T.true_value(), T.true_value());
  T.CheckCall(T.true_value(), T.false_value(), T.true_value());
  T.CheckCall(T.true_value(), T.true_value(), T.false_value());
  T.CheckCall(T.false_value(), T.false_value(), T.false_value());

  T.CheckCall(T.Val(777), T.Val(777), T.Val(999));
  T.CheckCall(T.Val(999), T.Val(0.0), T.Val(999));
  T.CheckCall(T.Val("\x61"), T.Val("\x61"), T.Val("\x62"));
}


TEST(LogicalEffect) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x61\x20\x26\x26\x20\x28\x62\x20\x3d\x20\x61\x29\x3b\x20\x72\x65\x74\x75\x72\x6e\x20\x62\x3b\x20\x7d\x29");

  T.CheckCall(T.true_value(), T.true_value(), T.true_value());
  T.CheckCall(T.true_value(), T.false_value(), T.true_value());
  T.CheckCall(T.true_value(), T.true_value(), T.false_value());
  T.CheckCall(T.false_value(), T.false_value(), T.false_value());

  T.CheckCall(T.Val(777), T.Val(777), T.Val(999));
  T.CheckCall(T.Val(999), T.Val(0.0), T.Val(999));
  T.CheckCall(T.Val("\x61"), T.Val("\x61"), T.Val("\x62"));
}


TEST(IfStatement) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x29\x20\x7b\x20\x69\x66\x20\x28\x61\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\x20\x65\x6c\x73\x65\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\x20\x7d\x29");

  T.CheckCall(T.Val(1), T.true_value(), T.undefined());
  T.CheckCall(T.Val(2), T.false_value(), T.undefined());
  T.CheckCall(T.Val(2), T.undefined(), T.undefined());
  T.CheckCall(T.Val(2), T.Val(0.0), T.undefined());
  T.CheckCall(T.Val(1), T.Val(999), T.undefined());
  T.CheckCall(T.Val(1), T.Val("\x78"), T.undefined());
}


TEST(DoWhileStatement) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x64\x6f\x20\x7b\x20\x61\x2b\x3d\x32\x33\x3b\x20\x7d\x20\x77\x68\x69\x6c\x65\x28\x61\x20\x3c\x20\x62\x29\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x3b\x20\x7d\x29");

  T.CheckCall(T.Val(24), T.Val(1), T.Val(1));
  T.CheckCall(T.Val(24), T.Val(1), T.Val(23));
  T.CheckCall(T.Val(47), T.Val(1), T.Val(25));
  T.CheckCall(T.Val("\x73\x74\x72\x32\x33"), T.Val("\x73\x74\x72"), T.Val("\x73\x74\x72"));
}


TEST(WhileStatement) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x77\x68\x69\x6c\x65\x28\x61\x20\x3c\x20\x62\x29\x20\x7b\x20\x61\x2b\x3d\x32\x33\x3b\x20\x7d\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x3b\x20\x7d\x29");

  T.CheckCall(T.Val(1), T.Val(1), T.Val(1));
  T.CheckCall(T.Val(24), T.Val(1), T.Val(23));
  T.CheckCall(T.Val(47), T.Val(1), T.Val(25));
  T.CheckCall(T.Val("\x73\x74\x72"), T.Val("\x73\x74\x72"), T.Val("\x73\x74\x72"));
}


TEST(ForStatement) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x66\x6f\x72\x20\x28\x3b\x20\x61\x20\x3c\x20\x62\x3b\x20\x61\x2b\x3d\x32\x33\x29\x20\x7b\x7d\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x3b\x20\x7d\x29");

  T.CheckCall(T.Val(1), T.Val(1), T.Val(1));
  T.CheckCall(T.Val(24), T.Val(1), T.Val(23));
  T.CheckCall(T.Val(47), T.Val(1), T.Val(25));
  T.CheckCall(T.Val("\x73\x74\x72"), T.Val("\x73\x74\x72"), T.Val("\x73\x74\x72"));
}


static void TestForIn(const char* code) {
  FunctionTester T(code);
  T.CheckCall(T.undefined(), T.undefined());
  T.CheckCall(T.undefined(), T.null());
  T.CheckCall(T.undefined(), T.NewObject("\x28\x7b\x7d\x29"));
  T.CheckCall(T.undefined(), T.Val(1));
  T.CheckCall(T.Val("\x32"), T.Val("\x73\x74\x72"));
  T.CheckCall(T.Val("\x61"), T.NewObject("\x28\x7b\x27\x61\x27\x20\x3a\x20\x31\x7d\x29"));
  T.CheckCall(T.Val("\x32"), T.NewObject("\x28\x5b\x31\x2c\x20\x32\x2c\x20\x33\x5d\x29"));
  T.CheckCall(T.Val("\x61"), T.NewObject("\x28\x7b\x27\x61\x27\x20\x3a\x20\x31\x2c\x20\x27\x62\x27\x20\x3a\x20\x31\x7d\x29"), T.Val("\x62"));
  T.CheckCall(T.Val("\x31"), T.NewObject("\x28\x5b\x31\x2c\x20\x32\x2c\x20\x33\x5d\x29"), T.Val("\x32"));
}


TEST(ForInStatement) {
  // Variable assignment.
  TestForIn(
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x20\x62\x29\x20\x7b"
      "\x76\x61\x72\x20\x6c\x61\x73\x74\x3b"
      "\x66\x6f\x72\x20\x28\x76\x61\x72\x20\x78\x20\x69\x6e\x20\x61\x29\x20\x7b"
      "\x20\x20\x69\x66\x20\x28\x62\x29\x20\x7b\x20\x64\x65\x6c\x65\x74\x65\x20\x61\x5b\x62\x5d\x3b\x20\x62\x20\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x3b\x20\x7d"
      "\x20\x20\x6c\x61\x73\x74\x20\x3d\x20\x78\x3b"
      "\x7d"
      "\x72\x65\x74\x75\x72\x6e\x20\x6c\x61\x73\x74\x3b\x7d\x29");
  // Indexed assignment.
  TestForIn(
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x20\x62\x29\x20\x7b"
      "\x76\x61\x72\x20\x61\x72\x72\x61\x79\x20\x3d\x20\x5b\x30\x2c\x20\x31\x2c\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x5d\x3b"
      "\x66\x6f\x72\x20\x28\x61\x72\x72\x61\x79\x5b\x32\x5d\x20\x69\x6e\x20\x61\x29\x20\x7b"
      "\x20\x20\x69\x66\x20\x28\x62\x29\x20\x7b\x20\x64\x65\x6c\x65\x74\x65\x20\x61\x5b\x62\x5d\x3b\x20\x62\x20\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x3b\x20\x7d"
      "\x7d"
      "\x72\x65\x74\x75\x72\x6e\x20\x61\x72\x72\x61\x79\x5b\x32\x5d\x3b\x7d\x29");
  // Named assignment.
  TestForIn(
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x20\x62\x29\x20\x7b"
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x27\x61\x27\x20\x3a\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x7d\x3b"
      "\x66\x6f\x72\x20\x28\x6f\x62\x6a\x2e\x61\x20\x69\x6e\x20\x61\x29\x20\x7b"
      "\x20\x20\x69\x66\x20\x28\x62\x29\x20\x7b\x20\x64\x65\x6c\x65\x74\x65\x20\x61\x5b\x62\x5d\x3b\x20\x62\x20\x3d\x20\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x3b\x20\x7d"
      "\x7d"
      "\x72\x65\x74\x75\x72\x6e\x20\x6f\x62\x6a\x2e\x61\x3b\x7d\x29");
}


TEST(SwitchStatement) {
  const char* src =
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b"
      "\x20\x20\x76\x61\x72\x20\x72\x20\x3d\x20\x27\x2d\x27\x3b"
      "\x20\x20\x73\x77\x69\x74\x63\x68\x20\x28\x61\x29\x20\x7b"
      "\x20\x20\x20\x20\x63\x61\x73\x65\x20\x27\x78\x27\x20\x20\x20\x20\x3a\x20\x72\x20\x2b\x3d\x20\x27\x58\x2d\x27\x3b"
      "\x20\x20\x20\x20\x63\x61\x73\x65\x20\x62\x20\x2b\x20\x27\x62\x27\x3a\x20\x72\x20\x2b\x3d\x20\x27\x42\x2d\x27\x3b"
      "\x20\x20\x20\x20\x64\x65\x66\x61\x75\x6c\x74\x20\x20\x20\x20\x20\x3a\x20\x72\x20\x2b\x3d\x20\x27\x44\x2d\x27\x3b"
      "\x20\x20\x20\x20\x63\x61\x73\x65\x20\x27\x79\x27\x20\x20\x20\x20\x3a\x20\x72\x20\x2b\x3d\x20\x27\x59\x2d\x27\x3b"
      "\x20\x20\x7d"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x72\x3b"
      "\x7d\x29";
  FunctionTester T(src);

  T.CheckCall(T.Val("\x2d\x58\x2d\x42\x2d\x44\x2d\x59\x2d"), T.Val("\x78"), T.Val("\x42"));
  T.CheckCall(T.Val("\x2d\x42\x2d\x44\x2d\x59\x2d"), T.Val("\x42\x62"), T.Val("\x42"));
  T.CheckCall(T.Val("\x2d\x44\x2d\x59\x2d"), T.Val("\x7a"), T.Val("\x42"));
  T.CheckCall(T.Val("\x2d\x59\x2d"), T.Val("\x79"), T.Val("\x42"));

  CompileRun("\x76\x61\x72\x20\x63\x20\x3d\x20\x30\x3b\x20\x76\x61\x72\x20\x6f\x20\x3d\x20\x7b\x20\x74\x6f\x53\x74\x72\x69\x6e\x67\x3a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x7b\x72\x65\x74\x75\x72\x6e\x20\x63\x2b\x2b\x7d\x20\x7d\x3b");
  T.CheckCall(T.Val("\x2d\x44\x2d\x59\x2d"), T.Val("\x31\x62"), T.NewObject("\x6f"));
  T.CheckCall(T.Val("\x2d\x42\x2d\x44\x2d\x59\x2d"), T.Val("\x31\x62"), T.NewObject("\x6f"));
  T.CheckCall(T.Val("\x2d\x44\x2d\x59\x2d"), T.Val("\x31\x62"), T.NewObject("\x6f"));
}


TEST(BlockBreakStatement) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x4c\x3a\x7b\x20\x69\x66\x20\x28\x61\x29\x20\x62\x72\x65\x61\x6b\x20\x4c\x3b\x20\x62\x3d\x31\x3b\x20\x7d\x20\x72\x65\x74\x75\x72\x6e\x20\x62\x3b\x20\x7d\x29");

  T.CheckCall(T.Val(7), T.true_value(), T.Val(7));
  T.CheckCall(T.Val(1), T.false_value(), T.Val(7));
}


TEST(BlockReturnStatement) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x4c\x3a\x7b\x20\x69\x66\x20\x28\x61\x29\x20\x62\x3d\x31\x3b\x20\x72\x65\x74\x75\x72\x6e\x20\x62\x3b\x20\x7d\x20\x7d\x29");

  T.CheckCall(T.Val(1), T.true_value(), T.Val(7));
  T.CheckCall(T.Val(7), T.false_value(), T.Val(7));
}


TEST(NestedIfConditional) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x69\x66\x20\x28\x61\x29\x20\x7b\x20\x62\x20\x3d\x20\x28\x62\x3f\x62\x3a\x37\x29\x20\x2b\x20\x31\x3b\x20\x7d\x20\x72\x65\x74\x75\x72\x6e\x20\x62\x3b\x20\x7d\x29");

  T.CheckCall(T.Val(4), T.false_value(), T.Val(4));
  T.CheckCall(T.Val(6), T.true_value(), T.Val(5));
  T.CheckCall(T.Val(8), T.true_value(), T.undefined());
}


TEST(NestedIfLogical) {
  const char* src =
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b"
      "\x20\x20\x69\x66\x20\x28\x61\x20\x7c\x7c\x20\x62\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\x20\x65\x6c\x73\x65\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d"
      "\x7d\x29";
  FunctionTester T(src);

  T.CheckCall(T.Val(1), T.true_value(), T.true_value());
  T.CheckCall(T.Val(1), T.false_value(), T.true_value());
  T.CheckCall(T.Val(1), T.true_value(), T.false_value());
  T.CheckCall(T.Val(2), T.false_value(), T.false_value());
  T.CheckCall(T.Val(1), T.Val(1.0), T.Val(1.0));
  T.CheckCall(T.Val(1), T.Val(0.0), T.Val(1.0));
  T.CheckCall(T.Val(1), T.Val(1.0), T.Val(0.0));
  T.CheckCall(T.Val(2), T.Val(0.0), T.Val(0.0));
}


TEST(NestedIfElseFor) {
  const char* src =
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b"
      "\x20\x20\x69\x66\x20\x28\x21\x61\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x62\x20\x2d\x20\x33\x3b\x20\x7d\x20\x65\x6c\x73\x65\x20\x7b\x20\x66\x6f\x72\x20\x28\x3b\x20\x61\x20\x3c\x20\x62\x3b\x20\x61\x2b\x2b\x29\x3b\x20\x7d"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x3b"
      "\x7d\x29";
  FunctionTester T(src);

  T.CheckCall(T.Val(1), T.false_value(), T.Val(4));
  T.CheckCall(T.Val(2), T.true_value(), T.Val(2));
  T.CheckCall(T.Val(3), T.Val(3), T.Val(1));
}


TEST(NestedWhileWhile) {
  const char* src =
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x29\x20\x7b"
      "\x20\x20\x76\x61\x72\x20\x69\x20\x3d\x20\x61\x3b\x20\x77\x68\x69\x6c\x65\x20\x28\x66\x61\x6c\x73\x65\x29\x20\x77\x68\x69\x6c\x65\x28\x66\x61\x6c\x73\x65\x29\x20\x72\x65\x74\x75\x72\x6e\x20\x69\x3b"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x69\x3b"
      "\x7d\x29";
  FunctionTester T(src);

  T.CheckCall(T.Val(2.0), T.Val(2.0), T.Val(-1.0));
  T.CheckCall(T.Val(65.0), T.Val(65.0), T.Val(-1.0));
}


TEST(NestedForIf) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x66\x6f\x72\x20\x28\x3b\x20\x61\x20\x3e\x20\x31\x3b\x20\x61\x2d\x2d\x29\x20\x69\x66\x20\x28\x62\x29\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\x29");

  T.CheckCall(T.Val(1), T.Val(3), T.true_value());
  T.CheckCall(T.undefined(), T.Val(2), T.false_value());
  T.CheckCall(T.undefined(), T.Val(1), T.null());
}


TEST(NestedForConditional) {
  FunctionTester T("\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x61\x2c\x62\x29\x20\x7b\x20\x66\x6f\x72\x20\x28\x3b\x20\x61\x20\x3e\x20\x31\x3b\x20\x61\x2d\x2d\x29\x20\x72\x65\x74\x75\x72\x6e\x20\x62\x20\x3f\x20\x31\x20\x3a\x20\x32\x3b\x20\x7d\x29");

  T.CheckCall(T.Val(1), T.Val(3), T.true_value());
  T.CheckCall(T.Val(2), T.Val(2), T.false_value());
  T.CheckCall(T.undefined(), T.Val(1), T.null());
}
