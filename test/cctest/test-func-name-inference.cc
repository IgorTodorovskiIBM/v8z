// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#include "src/v8.h"

#include "src/api.h"
#include "src/debug.h"
#include "src/runtime.h"
#include "test/cctest/cctest.h"


using ::v8::internal::CStrVector;
using ::v8::internal::Factory;
using ::v8::internal::Handle;
using ::v8::internal::Heap;
using ::v8::internal::Isolate;
using ::v8::internal::JSFunction;
using ::v8::internal::Object;
using ::v8::internal::Runtime;
using ::v8::internal::Script;
using ::v8::internal::SmartArrayPointer;
using ::v8::internal::SharedFunctionInfo;
using ::v8::internal::String;


static void CheckFunctionName(v8::Handle<v8::Script> script,
                              const char* func_pos_src,
                              const char* ref_inferred_name) {
  Isolate* isolate = CcTest::i_isolate();
  Factory* factory = isolate->factory();

  // Get script source.
  Handle<Object> obj = v8::Utils::OpenHandle(*script);
  Handle<SharedFunctionInfo> shared_function;
  if (obj->IsSharedFunctionInfo()) {
    shared_function =
        Handle<SharedFunctionInfo>(SharedFunctionInfo::cast(*obj));
  } else {
    shared_function =
        Handle<SharedFunctionInfo>(JSFunction::cast(*obj)->shared());
  }
  Handle<Script> i_script(Script::cast(shared_function->script()));
  CHECK(i_script->source()->IsString());
  Handle<String> script_src(String::cast(i_script->source()));

  // Find the position of a given func source substring in the source.
  Handle<String> func_pos_str =
      factory->NewStringFromAsciiChecked(func_pos_src);
  int func_pos = Runtime::StringMatch(isolate,
                                      script_src,
                                      func_pos_str,
                                      0);
  CHECK_NE(0, func_pos);

  // Obtain SharedFunctionInfo for the function.
  isolate->debug()->PrepareForBreakPoints();
  Object* shared_func_info_ptr =
      isolate->debug()->FindSharedFunctionInfoInScript(i_script, func_pos);
  CHECK(shared_func_info_ptr != CcTest::heap()->undefined_value());
  Handle<SharedFunctionInfo> shared_func_info(
      SharedFunctionInfo::cast(shared_func_info_ptr));

  // Verify inferred function name.
  SmartArrayPointer<char> inferred_name =
      shared_func_info->inferred_name()->ToCString();
  CHECK_EQ(ref_inferred_name, inferred_name.get());
}


static v8::Handle<v8::Script> Compile(v8::Isolate* isolate, const char* src) {
  return v8::Script::Compile(v8::String::NewFromUtf8(isolate, src));
}


TEST(GlobalProperty) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x31\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x66\x75\x6e\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x66\x75\x6e\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x66\x75\x6e\x32");
}


TEST(GlobalVar) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x76\x61\x72\x20\x66\x75\x6e\x31\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x76\x61\x72\x20\x66\x75\x6e\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x66\x75\x6e\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x66\x75\x6e\x32");
}


TEST(LocalVar) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x75\x74\x65\x72\x28\x29\x20\x7b\xa"
      "\x20\x20\x76\x61\x72\x20\x66\x75\x6e\x31\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x20\x20\x76\x61\x72\x20\x66\x75\x6e\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa"
      "\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x66\x75\x6e\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x66\x75\x6e\x32");
}


TEST(InConstructor) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x4d\x79\x43\x6c\x61\x73\x73\x28\x29\x20\x7b\xa"
      "\x20\x20\x74\x68\x69\x73\x2e\x6d\x65\x74\x68\x6f\x64\x31\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x20\x20\x74\x68\x69\x73\x2e\x6d\x65\x74\x68\x6f\x64\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa"
      "\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x32");
}


TEST(Factory) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x63\x72\x65\x61\x74\x65\x4d\x79\x4f\x62\x6a\x28\x29\x20\x7b\xa"
      "\x20\x20\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b\xa"
      "\x20\x20\x6f\x62\x6a\x2e\x6d\x65\x74\x68\x6f\x64\x31\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x20\x20\x6f\x62\x6a\x2e\x6d\x65\x74\x68\x6f\x64\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x6f\x62\x6a\x3b\xa"
      "\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x6f\x62\x6a\x2e\x6d\x65\x74\x68\x6f\x64\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x6f\x62\x6a\x2e\x6d\x65\x74\x68\x6f\x64\x32");
}


TEST(Static) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x4d\x79\x43\x6c\x61\x73\x73\x28\x29\x20\x7b\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x73\x74\x61\x74\x69\x63\x31\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x73\x74\x61\x74\x69\x63\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x20\x3d\x20\x7b\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x2e\x73\x74\x61\x74\x69\x63\x33\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x33\x3b\x20\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x2e\x73\x74\x61\x74\x69\x63\x34\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x34\x3b\x20\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x73\x74\x61\x74\x69\x63\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x73\x74\x61\x74\x69\x63\x32");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x33", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x2e\x73\x74\x61\x74\x69\x63\x33");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x34", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x2e\x73\x74\x61\x74\x69\x63\x34");
}


TEST(Prototype) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x4d\x79\x43\x6c\x61\x73\x73\x28\x29\x20\x7b\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x6d\x65\x74\x68\x6f\x64\x31\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x6d\x65\x74\x68\x6f\x64\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x6d\x65\x74\x68\x6f\x64\x33\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x33\x3b\x20\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x6d\x65\x74\x68\x6f\x64\x34\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x34\x3b\x20\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x32");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x33", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x33");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x34", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x4d\x79\x49\x6e\x6e\x65\x72\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x34");
}


TEST(ObjectLiteral) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x4d\x79\x43\x6c\x61\x73\x73\x28\x29\x20\x7b\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x20\x3d\x20\x7b\xa"
      "\x20\x20\x6d\x65\x74\x68\x6f\x64\x31\x3a\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\x2c\xa"
      "\x20\x20\x6d\x65\x74\x68\x6f\x64\x32\x3a\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\x20\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x32");
}


TEST(AsParameter) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x31\x28\x61\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x28\x29\x3b\x20\x7d\xa"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x32\x28\x61\x2c\x20\x62\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x61\x28\x29\x20\x2b\x20\x62\x28\x29\x3b\x20\x7d\xa"
      "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x31\x20\x3d\x20\x66\x31\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\x29\xa"
      "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x32\x20\x3d\x20\x66\x32\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x33\x3b\x20\x7d\x29");
  // Can't infer names here.
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x33", "");
}


TEST(MultipleFuncsConditional) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x31\x20\x3d\x20\x30\x20\x3f\xa"
      "\x20\x20\x20\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\x20\x3a\xa"
      "\x20\x20\x20\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x66\x75\x6e\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x66\x75\x6e\x31");
}


TEST(MultipleFuncsInLiteral) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x4d\x79\x43\x6c\x61\x73\x73\x28\x29\x20\x7b\x7d\xa"
      "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x20\x3d\x20\x7b\xa"
      "\x20\x20\x6d\x65\x74\x68\x6f\x64\x31\x3a\x20\x30\x20\x3f\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\x20\x3a\xa"
      "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\x20\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x4d\x79\x43\x6c\x61\x73\x73\x2e\x6d\x65\x74\x68\x6f\x64\x31");
}


TEST(AnonymousInAnonymousClosure1) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x20\x20\x76\x61\x72\x20\x61\x20\x3d\x20\x31\x3b\xa"
      "\x20\x20\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x3b\xa"
      "\x20\x20\x7d\x29\x28\x29\x3b\xa"
      "\x20\x20\x76\x61\x72\x20\x62\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x20\x20\x76\x61\x72\x20\x63\x20\x3d\x20\x31\x3b\xa"
      "\x20\x20\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x3b\xa"
      "\x20\x20\x7d\x3b\xa"
      "\x7d\x29\x28\x29\x3b");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e", "");
}


TEST(AnonymousInAnonymousClosure2) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x20\x20\x76\x61\x72\x20\x61\x20\x3d\x20\x31\x3b\xa"
      "\x20\x20\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x3b\xa"
      "\x20\x20\x7d\x29\x28\x29\x3b\xa"
      "\x20\x20\x76\x61\x72\x20\x63\x20\x3d\x20\x31\x3b\xa"
      "\x7d\x29\x28\x29\x3b");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e", "");
}


TEST(NamedInAnonymousClosure) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x76\x61\x72\x20\x66\x6f\x6f\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6e\x61\x6d\x65\x64\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x20\x20\x76\x61\x72\x20\x61\x20\x3d\x20\x31\x3b\xa"
      "\x20\x20\x7d\x29\x28\x29\x3b\xa"
      "\x20\x20\x76\x61\x72\x20\x63\x20\x3d\x20\x31\x3b\xa"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x3b\xa"
      "\x7d\x3b");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e", "\x66\x6f\x6f");
}


// See http://code.google.com/p/v8/issues/detail?id=380
TEST(Issue380) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x61\x28\x29\x20\x7b\xa"
      "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x70\x2c\x61\x2c\x63\x2c\x6b\x2c\x65\x2c\x64\x29"
      "\x7b\x72\x65\x74\x75\x72\x6e\x20\x70\x7d\x28\x22\x69\x66\x20\x62\x6c\x61\x68\x20\x62\x6c\x61\x68\x22\x2c\x36\x32\x2c\x31\x39\x37\x36\x2c\x27\x61\x7c\x62\x27\x2e\x73\x70\x6c\x69\x74\x28\x27\x7c\x27\x29\x2c\x30\x2c\x7b\x7d\x29\xa"
      "\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x70", "");
}


TEST(MultipleAssignments) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x76\x61\x72\x20\x66\x75\x6e\x31\x20\x3d\x20\x66\x75\x6e\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x76\x61\x72\x20\x62\x61\x72\x31\x20\x3d\x20\x62\x61\x72\x32\x20\x3d\x20\x62\x61\x72\x33\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa"
      "\x66\x6f\x6f\x31\x20\x3d\x20\x66\x6f\x6f\x32\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x33\x3b\x20\x7d\xa"
      "\x62\x61\x7a\x31\x20\x3d\x20\x62\x61\x7a\x32\x20\x3d\x20\x62\x61\x7a\x33\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x34\x3b\x20\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x66\x75\x6e\x32");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x62\x61\x72\x33");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x33", "\x66\x6f\x6f\x32");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x34", "\x62\x61\x7a\x33");
}


TEST(AsConstructorParameter) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x46\x6f\x6f\x28\x29\x20\x7b\x7d\xa"
      "\x76\x61\x72\x20\x66\x6f\x6f\x20\x3d\x20\x6e\x65\x77\x20\x46\x6f\x6f\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\x29\xa"
      "\x76\x61\x72\x20\x62\x61\x72\x20\x3d\x20\x6e\x65\x77\x20\x46\x6f\x6f\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x33\x3b\x20\x7d\x29");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x33", "");
}


TEST(FactoryHashmap) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x63\x72\x65\x61\x74\x65\x4d\x79\x4f\x62\x6a\x28\x29\x20\x7b\xa"
      "\x20\x20\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b\xa"
      "\x20\x20\x6f\x62\x6a\x5b\x22\x6d\x65\x74\x68\x6f\x64\x31\x22\x5d\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x20\x20\x6f\x62\x6a\x5b\x22\x6d\x65\x74\x68\x6f\x64\x32\x22\x5d\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x6f\x62\x6a\x3b\xa"
      "\x7d");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x6f\x62\x6a\x2e\x6d\x65\x74\x68\x6f\x64\x31");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x6f\x62\x6a\x2e\x6d\x65\x74\x68\x6f\x64\x32");
}


TEST(FactoryHashmapVariable) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x63\x72\x65\x61\x74\x65\x4d\x79\x4f\x62\x6a\x28\x29\x20\x7b\xa"
      "\x20\x20\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b\xa"
      "\x20\x20\x76\x61\x72\x20\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x20\x3d\x20\x22\x6d\x65\x74\x68\x6f\x64\x31\x22\x3b\xa"
      "\x20\x20\x6f\x62\x6a\x5b\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x5d\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x20\x20\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x20\x3d\x20\x22\x6d\x65\x74\x68\x6f\x64\x32\x22\x3b\xa"
      "\x20\x20\x6f\x62\x6a\x5b\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x5d\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\x20\x7d\xa"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x6f\x62\x6a\x3b\xa"
      "\x7d");
  // Can't infer function names statically.
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x6f\x62\x6a\x2e\x28\x61\x6e\x6f\x6e\x79\x6d\x6f\x75\x73\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x29");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x6f\x62\x6a\x2e\x28\x61\x6e\x6f\x6e\x79\x6d\x6f\x75\x73\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x29");
}


TEST(FactoryHashmapConditional) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x63\x72\x65\x61\x74\x65\x4d\x79\x4f\x62\x6a\x28\x29\x20\x7b\xa"
      "\x20\x20\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b\xa"
      "\x20\x20\x6f\x62\x6a\x5b\x30\x20\x3f\x20\x22\x6d\x65\x74\x68\x6f\x64\x31\x22\x20\x3a\x20\x22\x6d\x65\x74\x68\x6f\x64\x32\x22\x5d\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\x20\x7d\xa"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x6f\x62\x6a\x3b\xa"
      "\x7d");
  // Can't infer the function name statically.
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "\x6f\x62\x6a\x2e\x28\x61\x6e\x6f\x6e\x79\x6d\x6f\x75\x73\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x29");
}


TEST(GlobalAssignmentAndCall) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x76\x61\x72\x20\x46\x6f\x6f\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\xa"
      "\x7d\x28\x29\x3b\xa"
      "\x76\x61\x72\x20\x42\x61\x7a\x20\x3d\x20\x42\x61\x72\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\xa"
      "\x7d");
  // The inferred name is empty, because this is an assignment of a result.
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "");
  // See MultipleAssignments test.
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x42\x61\x72");
}


TEST(AssignmentAndCall) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x45\x6e\x63\x6c\x6f\x73\x69\x6e\x67\x28\x29\x20\x7b\xa"
      "\x20\x20\x76\x61\x72\x20\x46\x6f\x6f\x3b\xa"
      "\x20\x20\x46\x6f\x6f\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x3b\xa"
      "\x20\x20\x7d\x28\x29\x3b\xa"
      "\x20\x20\x76\x61\x72\x20\x42\x61\x7a\x20\x3d\x20\x42\x61\x72\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x3b\xa"
      "\x20\x20\x7d\xa"
      "\x7d\x29\x28\x29\x3b");
  // The inferred name is empty, because this is an assignment of a result.
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x31", "");
  // See MultipleAssignments test.
  // TODO(2276): Lazy compiling the enclosing outer closure would yield
  // in "Enclosing.Bar" being the inferred name here.
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32", "\x42\x61\x72");
}


TEST(MethodAssignmentInAnonymousFunctionCall) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x76\x61\x72\x20\x45\x76\x65\x6e\x74\x53\x6f\x75\x72\x63\x65\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b\x20\x7d\x3b\xa"
      "\x20\x20\x20\x20\x45\x76\x65\x6e\x74\x53\x6f\x75\x72\x63\x65\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x61\x64\x64\x4c\x69\x73\x74\x65\x6e\x65\x72\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x30\x31\x32\x3b\xa"
      "\x20\x20\x20\x20\x7d\x3b\xa"
      "\x20\x20\x20\x20\x74\x68\x69\x73\x2e\x50\x75\x62\x6c\x69\x63\x45\x76\x65\x6e\x74\x53\x6f\x75\x72\x63\x65\x20\x3d\x20\x45\x76\x65\x6e\x74\x53\x6f\x75\x72\x63\x65\x3b\xa"
      "\x7d\x29\x28\x29\x3b");
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32\x30\x31\x32", "\x45\x76\x65\x6e\x74\x53\x6f\x75\x72\x63\x65\x2e\x61\x64\x64\x4c\x69\x73\x74\x65\x6e\x65\x72");
}


TEST(ReturnAnonymousFunction) {
  CcTest::InitializeVM();
  v8::HandleScope scope(CcTest::isolate());

  v8::Handle<v8::Script> script = Compile(
      CcTest::isolate(),
      "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b\xa"
      "\x20\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x77\x72\x61\x70\x43\x6f\x64\x65\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x32\x30\x31\x32\x3b\xa"
      "\x20\x20\x20\x20\x7d\x3b\xa"
      "\x20\x20\x7d\x3b\xa"
      "\x20\x20\x76\x61\x72\x20\x66\x6f\x6f\x20\x3d\x20\x31\x30\x3b\xa"
      "\x20\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x29\x20\x7b\xa"
      "\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x77\x72\x61\x70\x43\x6f\x64\x65\x28\x29\x3b\xa"
      "\x20\x20\x7d\xa"
      "\x20\x20\x74\x68\x69\x73\x2e\x72\x65\x66\x20\x3d\x20\x66\x3b\xa"
      "\x7d\x29\x28\x29");
  script->Run();
  CheckFunctionName(script, "\x72\x65\x74\x75\x72\x6e\x20\x32\x30\x31\x32", "");
}
