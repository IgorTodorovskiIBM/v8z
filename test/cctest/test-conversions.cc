// Copyright 2011 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <stdlib.h>

#include "src/v8.h"

#include "src/base/platform/platform.h"
#include "test/cctest/cctest.h"

using namespace v8::internal;


TEST(Hex) {
  UnicodeCache uc;
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x78\x30", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x58\x30", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x30\x78\x31", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(16.0, StringToDouble(&uc, "\x30\x78\x31\x30", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(255.0, StringToDouble(&uc, "\x30\x78\x66\x66",
                                 ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(175.0, StringToDouble(&uc, "\x30\x78\x41\x46",
                                 ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));

  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x78\x30", ALLOW_HEX));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x58\x30", ALLOW_HEX));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x30\x78\x31", ALLOW_HEX));
  CHECK_EQ(16.0, StringToDouble(&uc, "\x30\x78\x31\x30", ALLOW_HEX));
  CHECK_EQ(255.0, StringToDouble(&uc, "\x30\x78\x66\x66", ALLOW_HEX));
  CHECK_EQ(175.0, StringToDouble(&uc, "\x30\x78\x41\x46", ALLOW_HEX));
}


TEST(Octal) {
  UnicodeCache uc;
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x6f\x30", ALLOW_OCTAL | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x4f\x30", ALLOW_OCTAL | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x30\x6f\x31", ALLOW_OCTAL | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(7.0, StringToDouble(&uc, "\x30\x6f\x37", ALLOW_OCTAL | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(8.0, StringToDouble(&uc, "\x30\x6f\x31\x30",
                               ALLOW_OCTAL | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(63.0, StringToDouble(&uc, "\x30\x6f\x37\x37",
                                ALLOW_OCTAL | ALLOW_IMPLICIT_OCTAL));

  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x6f\x30", ALLOW_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x4f\x30", ALLOW_OCTAL));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x30\x6f\x31", ALLOW_OCTAL));
  CHECK_EQ(7.0, StringToDouble(&uc, "\x30\x6f\x37", ALLOW_OCTAL));
  CHECK_EQ(8.0, StringToDouble(&uc, "\x30\x6f\x31\x30", ALLOW_OCTAL));
  CHECK_EQ(63.0, StringToDouble(&uc, "\x30\x6f\x37\x37", ALLOW_OCTAL));
}


TEST(ImplicitOctal) {
  UnicodeCache uc;
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x30", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x30\x31", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(7.0, StringToDouble(&uc, "\x30\x37", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(8.0, StringToDouble(&uc, "\x30\x31\x30", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(63.0, StringToDouble(&uc, "\x30\x37\x37", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));

  CHECK_EQ(0.0, StringToDouble(&uc, "\x30", ALLOW_HEX));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x30", ALLOW_HEX));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x30\x31", ALLOW_HEX));
  CHECK_EQ(7.0, StringToDouble(&uc, "\x30\x37", ALLOW_HEX));
  CHECK_EQ(10.0, StringToDouble(&uc, "\x30\x31\x30", ALLOW_HEX));
  CHECK_EQ(77.0, StringToDouble(&uc, "\x30\x37\x37", ALLOW_HEX));

  const double x = 010000000000;  // Power of 2, no rounding errors.
  CHECK_EQ(x * x * x * x * x, StringToDouble(&uc, "\x30\x31" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
      "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", ALLOW_IMPLICIT_OCTAL));
}


TEST(Binary) {
  UnicodeCache uc;
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x62\x30",
                               ALLOW_BINARY | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x42\x30",
                               ALLOW_BINARY | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x30\x62\x31",
                               ALLOW_BINARY | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(2.0, StringToDouble(&uc, "\x30\x62\x31\x30",
                               ALLOW_BINARY | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(3.0, StringToDouble(&uc, "\x30\x62\x31\x31",
                               ALLOW_BINARY | ALLOW_IMPLICIT_OCTAL));

  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x62\x30", ALLOW_BINARY));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x42\x30", ALLOW_BINARY));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x30\x62\x31", ALLOW_BINARY));
  CHECK_EQ(2.0, StringToDouble(&uc, "\x30\x62\x31\x30", ALLOW_BINARY));
  CHECK_EQ(3.0, StringToDouble(&uc, "\x30\x62\x31\x31", ALLOW_BINARY));
}


TEST(MalformedOctal) {
  UnicodeCache uc;
  CHECK_EQ(8.0, StringToDouble(&uc, "\x30\x38", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(81.0, StringToDouble(&uc, "\x30\x38\x31", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(78.0, StringToDouble(&uc, "\x30\x37\x38", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));

  CHECK(isnan(StringToDouble(&uc, "\x30\x37\x2e\x37",
                                  ALLOW_HEX | ALLOW_IMPLICIT_OCTAL)));
  CHECK(isnan(StringToDouble(&uc, "\x30\x37\x2e\x38",
                                  ALLOW_HEX | ALLOW_IMPLICIT_OCTAL)));
  CHECK(isnan(StringToDouble(&uc, "\x30\x37\x65\x38",
                                  ALLOW_HEX | ALLOW_IMPLICIT_OCTAL)));
  CHECK(isnan(StringToDouble(&uc, "\x30\x37\x65\x37",
                                  ALLOW_HEX | ALLOW_IMPLICIT_OCTAL)));

  CHECK_EQ(8.7, StringToDouble(&uc, "\x30\x38\x2e\x37", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(8e7, StringToDouble(&uc, "\x30\x38\x65\x37", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));

  CHECK_EQ(0.001, StringToDouble(&uc, "\x30\x2e\x30\x30\x31",
                                 ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.713, StringToDouble(&uc, "\x30\x2e\x37\x31\x33",
                                 ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));

  CHECK_EQ(8.0, StringToDouble(&uc, "\x30\x38", ALLOW_HEX));
  CHECK_EQ(81.0, StringToDouble(&uc, "\x30\x38\x31", ALLOW_HEX));
  CHECK_EQ(78.0, StringToDouble(&uc, "\x30\x37\x38", ALLOW_HEX));

  CHECK_EQ(7.7, StringToDouble(&uc, "\x30\x37\x2e\x37", ALLOW_HEX));
  CHECK_EQ(7.8, StringToDouble(&uc, "\x30\x37\x2e\x38", ALLOW_HEX));
  CHECK_EQ(7e8, StringToDouble(&uc, "\x30\x37\x65\x38", ALLOW_HEX));
  CHECK_EQ(7e7, StringToDouble(&uc, "\x30\x37\x65\x37", ALLOW_HEX));

  CHECK_EQ(8.7, StringToDouble(&uc, "\x30\x38\x2e\x37", ALLOW_HEX));
  CHECK_EQ(8e7, StringToDouble(&uc, "\x30\x38\x65\x37", ALLOW_HEX));

  CHECK_EQ(0.001, StringToDouble(&uc, "\x30\x2e\x30\x30\x31", ALLOW_HEX));
  CHECK_EQ(0.713, StringToDouble(&uc, "\x30\x2e\x37\x31\x33", ALLOW_HEX));
}


TEST(TrailingJunk) {
  UnicodeCache uc;
  CHECK_EQ(8.0, StringToDouble(&uc, "\x38\x71", ALLOW_TRAILING_JUNK));
  CHECK_EQ(63.0, StringToDouble(&uc, "\x30\x37\x37\x71\x71\x71",
                                ALLOW_IMPLICIT_OCTAL | ALLOW_TRAILING_JUNK));
  CHECK_EQ(10.0, StringToDouble(&uc, "\x31\x30\x65",
                                ALLOW_IMPLICIT_OCTAL | ALLOW_TRAILING_JUNK));
  CHECK_EQ(10.0, StringToDouble(&uc, "\x31\x30\x65\x2d",
                                ALLOW_IMPLICIT_OCTAL | ALLOW_TRAILING_JUNK));
}


TEST(NonStrDecimalLiteral) {
  UnicodeCache uc;
  CHECK(isnan(
      StringToDouble(&uc, "\x20", NO_FLAGS, v8::base::OS::nan_value())));
  CHECK(
      isnan(StringToDouble(&uc, "", NO_FLAGS, v8::base::OS::nan_value())));
  CHECK(isnan(
      StringToDouble(&uc, "\x20", NO_FLAGS, v8::base::OS::nan_value())));
  CHECK_EQ(0.0, StringToDouble(&uc, "", NO_FLAGS));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x20", NO_FLAGS));
}


TEST(IntegerStrLiteral) {
  UnicodeCache uc;
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x2e\x30", NO_FLAGS));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30", NO_FLAGS));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x30", NO_FLAGS));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x30\x30", NO_FLAGS));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x31", NO_FLAGS));
  CHECK_EQ(-1.0, StringToDouble(&uc, "\x2d\x31", NO_FLAGS));
  CHECK_EQ(-1.0, StringToDouble(&uc, "\x20\x20\x2d\x31\x20\x20", NO_FLAGS));
  CHECK_EQ(1.0, StringToDouble(&uc, "\x20\x20\x2b\x31\x20\x20", NO_FLAGS));
  CHECK(isnan(StringToDouble(&uc, "\x20\x20\x2d\x20\x20\x31\x20\x20", NO_FLAGS)));
  CHECK(isnan(StringToDouble(&uc, "\x20\x20\x2b\x20\x20\x31\x20\x20", NO_FLAGS)));

  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x65\x30", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x65\x31", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x65\x2d\x31", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x65\x2d\x31\x30\x30\x30\x30\x30",
                               ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x65\x2b\x31\x30\x30\x30\x30\x30",
                               ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
  CHECK_EQ(0.0, StringToDouble(&uc, "\x30\x2e", ALLOW_HEX | ALLOW_IMPLICIT_OCTAL));
}


TEST(LongNumberStr) {
  UnicodeCache uc;
  CHECK_EQ(1e10, StringToDouble(&uc, "\x31" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", NO_FLAGS));
  CHECK_EQ(1e20, StringToDouble(&uc, "\x31" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", NO_FLAGS));

  CHECK_EQ(1e60, StringToDouble(&uc, "\x31" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
      "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30", NO_FLAGS));

  CHECK_EQ(1e-2, StringToDouble(&uc, "\x2e" "\x30" "\x31", NO_FLAGS));
  CHECK_EQ(1e-11, StringToDouble(&uc, "\x2e" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x31", NO_FLAGS));
  CHECK_EQ(1e-21, StringToDouble(&uc, "\x2e" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x31",
                                 NO_FLAGS));

  CHECK_EQ(1e-61, StringToDouble(&uc, "\x2e" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30"
      "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" "\x31", NO_FLAGS));


  // x = 24414062505131248.0 and y = 24414062505131252.0 are representable in
  // double. Check chat z = (x + y) / 2 is rounded to x...
  CHECK_EQ(24414062505131248.0,
           StringToDouble(&uc, "\x32\x34\x34\x31\x34\x30\x36\x32\x35\x30\x35\x31\x33\x31\x32\x35\x30\x2e\x30", NO_FLAGS));

  // ... and z = (x + y) / 2 + delta is rounded to y.
  CHECK_EQ(24414062505131252.0,
           StringToDouble(&uc, "\x32\x34\x34\x31\x34\x30\x36\x32\x35\x30\x35\x31\x33\x31\x32\x35\x30\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x31", NO_FLAGS));
}


TEST(MaximumSignificantDigits) {
  UnicodeCache uc;
  char num[] =
      "\x34\x2e\x34\x35\x30\x31\x34\x37\x37\x31\x37\x30\x31\x34\x34\x30\x32\x30\x32\x35\x30\x38\x31\x39\x39\x36\x36\x37\x32\x37\x39\x34\x39\x39\x31\x38\x36\x33\x35\x38\x35\x32\x34\x32\x36\x35\x38\x35\x39\x32\x36\x30\x35\x31\x31\x33\x35\x31\x36\x39\x35\x30\x39"
      "\x31\x32\x32\x38\x37\x32\x36\x32\x32\x33\x31\x32\x34\x39\x33\x31\x32\x36\x34\x30\x36\x39\x35\x33\x30\x35\x34\x31\x32\x37\x31\x31\x38\x39\x34\x32\x34\x33\x31\x37\x38\x33\x38\x30\x31\x33\x37\x30\x30\x38\x30\x38\x33\x30\x35\x32\x33\x31\x35\x34\x35\x37\x38"
      "\x32\x35\x31\x35\x34\x35\x33\x30\x33\x32\x33\x38\x32\x37\x37\x32\x36\x39\x35\x39\x32\x33\x36\x38\x34\x35\x37\x34\x33\x30\x34\x34\x30\x39\x39\x33\x36\x31\x39\x37\x30\x38\x39\x31\x31\x38\x37\x34\x37\x31\x35\x30\x38\x31\x35\x30\x35\x30\x39\x34\x31\x38\x30"
      "\x36\x30\x34\x38\x30\x33\x37\x35\x31\x31\x37\x33\x37\x38\x33\x32\x30\x34\x31\x31\x38\x35\x31\x39\x33\x35\x33\x33\x38\x37\x39\x36\x34\x31\x36\x31\x31\x35\x32\x30\x35\x31\x34\x38\x37\x34\x31\x33\x30\x38\x33\x31\x36\x33\x32\x37\x32\x35\x32\x30\x31\x32\x34"
      "\x36\x30\x36\x30\x32\x33\x31\x30\x35\x38\x36\x39\x30\x35\x33\x36\x32\x30\x36\x33\x31\x31\x37\x35\x32\x36\x35\x36\x32\x31\x37\x36\x35\x32\x31\x34\x36\x34\x36\x36\x34\x33\x31\x38\x31\x34\x32\x30\x35\x30\x35\x31\x36\x34\x30\x34\x33\x36\x33\x32\x32\x32\x32"
      "\x36\x36\x38\x30\x30\x36\x34\x37\x34\x33\x32\x36\x30\x35\x36\x30\x31\x31\x37\x31\x33\x35\x32\x38\x32\x39\x31\x35\x37\x39\x36\x34\x32\x32\x32\x37\x34\x35\x35\x34\x38\x39\x36\x38\x32\x31\x33\x33\x34\x37\x32\x38\x37\x33\x38\x33\x31\x37\x35\x34\x38\x34\x30"
      "\x33\x34\x31\x33\x39\x37\x38\x30\x39\x38\x34\x36\x39\x33\x34\x31\x35\x31\x30\x35\x35\x36\x31\x39\x35\x32\x39\x33\x38\x32\x31\x39\x31\x39\x38\x31\x34\x37\x33\x30\x30\x33\x32\x33\x34\x31\x30\x35\x33\x36\x36\x31\x37\x30\x38\x37\x39\x32\x32\x33\x31\x35\x31"
      "\x30\x38\x37\x33\x33\x35\x34\x31\x33\x31\x38\x38\x30\x34\x39\x31\x31\x30\x35\x35\x35\x33\x33\x39\x30\x32\x37\x38\x38\x34\x38\x35\x36\x37\x38\x31\x32\x31\x39\x30\x31\x37\x37\x35\x34\x35\x30\x30\x36\x32\x39\x38\x30\x36\x32\x32\x34\x35\x37\x31\x30\x32\x39"
      "\x35\x38\x31\x36\x33\x37\x31\x31\x37\x34\x35\x39\x34\x35\x36\x38\x37\x37\x33\x33\x30\x31\x31\x30\x33\x32\x34\x32\x31\x31\x36\x38\x39\x31\x37\x37\x36\x35\x36\x37\x31\x33\x37\x30\x35\x34\x39\x37\x33\x38\x37\x31\x30\x38\x32\x30\x37\x38\x32\x32\x34\x37\x37"
      "\x35\x38\x34\x32\x35\x30\x39\x36\x37\x30\x36\x31\x38\x39\x31\x36\x38\x37\x30\x36\x32\x37\x38\x32\x31\x36\x33\x33\x33\x35\x32\x39\x39\x33\x37\x36\x31\x33\x38\x30\x37\x35\x31\x31\x34\x32\x30\x30\x38\x38\x36\x32\x34\x39\x39\x37\x39\x35\x30\x35\x32\x37\x39"
      "\x31\x30\x31\x38\x37\x30\x39\x36\x36\x33\x34\x36\x33\x39\x34\x34\x30\x31\x35\x36\x34\x34\x39\x30\x37\x32\x39\x37\x33\x31\x35\x36\x35\x39\x33\x35\x32\x34\x34\x31\x32\x33\x31\x37\x31\x35\x33\x39\x38\x31\x30\x32\x32\x31\x32\x31\x33\x32\x32\x31\x32\x30\x31"
      "\x38\x34\x37\x30\x30\x33\x35\x38\x30\x37\x36\x31\x36\x32\x36\x30\x31\x36\x33\x35\x36\x38\x36\x34\x35\x38\x31\x31\x33\x35\x38\x34\x38\x36\x38\x33\x31\x35\x32\x31\x35\x36\x33\x36\x38\x36\x39\x31\x39\x37\x36\x32\x34\x30\x33\x37\x30\x34\x32\x32\x36\x30\x31"
      "\x36\x39\x39\x38\x32\x39\x31\x30\x31\x35\x36\x32\x35\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x65\x2d\x33\x30\x38";

  CHECK_EQ(4.4501477170144017780491e-308, StringToDouble(&uc, num, NO_FLAGS));

  // Changes the result of strtod (at least in glibc implementation).
  num[sizeof(num) - 8] = '\x31';

  CHECK_EQ(4.4501477170144022721148e-308, StringToDouble(&uc, num, NO_FLAGS));
}


TEST(MinimumExponent) {
  UnicodeCache uc;
  // Same test but with different point-position.
  char num[] =
  "\x34\x34\x35\x30\x31\x34\x37\x37\x31\x37\x30\x31\x34\x34\x30\x32\x30\x32\x35\x30\x38\x31\x39\x39\x36\x36\x37\x32\x37\x39\x34\x39\x39\x31\x38\x36\x33\x35\x38\x35\x32\x34\x32\x36\x35\x38\x35\x39\x32\x36\x30\x35\x31\x31\x33\x35\x31\x36\x39\x35\x30\x39\x31"
  "\x32\x32\x38\x37\x32\x36\x32\x32\x33\x31\x32\x34\x39\x33\x31\x32\x36\x34\x30\x36\x39\x35\x33\x30\x35\x34\x31\x32\x37\x31\x31\x38\x39\x34\x32\x34\x33\x31\x37\x38\x33\x38\x30\x31\x33\x37\x30\x30\x38\x30\x38\x33\x30\x35\x32\x33\x31\x35\x34\x35\x37\x38\x32"
  "\x35\x31\x35\x34\x35\x33\x30\x33\x32\x33\x38\x32\x37\x37\x32\x36\x39\x35\x39\x32\x33\x36\x38\x34\x35\x37\x34\x33\x30\x34\x34\x30\x39\x39\x33\x36\x31\x39\x37\x30\x38\x39\x31\x31\x38\x37\x34\x37\x31\x35\x30\x38\x31\x35\x30\x35\x30\x39\x34\x31\x38\x30\x36"
  "\x30\x34\x38\x30\x33\x37\x35\x31\x31\x37\x33\x37\x38\x33\x32\x30\x34\x31\x31\x38\x35\x31\x39\x33\x35\x33\x33\x38\x37\x39\x36\x34\x31\x36\x31\x31\x35\x32\x30\x35\x31\x34\x38\x37\x34\x31\x33\x30\x38\x33\x31\x36\x33\x32\x37\x32\x35\x32\x30\x31\x32\x34\x36"
  "\x30\x36\x30\x32\x33\x31\x30\x35\x38\x36\x39\x30\x35\x33\x36\x32\x30\x36\x33\x31\x31\x37\x35\x32\x36\x35\x36\x32\x31\x37\x36\x35\x32\x31\x34\x36\x34\x36\x36\x34\x33\x31\x38\x31\x34\x32\x30\x35\x30\x35\x31\x36\x34\x30\x34\x33\x36\x33\x32\x32\x32\x32\x36"
  "\x36\x38\x30\x30\x36\x34\x37\x34\x33\x32\x36\x30\x35\x36\x30\x31\x31\x37\x31\x33\x35\x32\x38\x32\x39\x31\x35\x37\x39\x36\x34\x32\x32\x32\x37\x34\x35\x35\x34\x38\x39\x36\x38\x32\x31\x33\x33\x34\x37\x32\x38\x37\x33\x38\x33\x31\x37\x35\x34\x38\x34\x30\x33"
  "\x34\x31\x33\x39\x37\x38\x30\x39\x38\x34\x36\x39\x33\x34\x31\x35\x31\x30\x35\x35\x36\x31\x39\x35\x32\x39\x33\x38\x32\x31\x39\x31\x39\x38\x31\x34\x37\x33\x30\x30\x33\x32\x33\x34\x31\x30\x35\x33\x36\x36\x31\x37\x30\x38\x37\x39\x32\x32\x33\x31\x35\x31\x30"
  "\x38\x37\x33\x33\x35\x34\x31\x33\x31\x38\x38\x30\x34\x39\x31\x31\x30\x35\x35\x35\x33\x33\x39\x30\x32\x37\x38\x38\x34\x38\x35\x36\x37\x38\x31\x32\x31\x39\x30\x31\x37\x37\x35\x34\x35\x30\x30\x36\x32\x39\x38\x30\x36\x32\x32\x34\x35\x37\x31\x30\x32\x39\x35"
  "\x38\x31\x36\x33\x37\x31\x31\x37\x34\x35\x39\x34\x35\x36\x38\x37\x37\x33\x33\x30\x31\x31\x30\x33\x32\x34\x32\x31\x31\x36\x38\x39\x31\x37\x37\x36\x35\x36\x37\x31\x33\x37\x30\x35\x34\x39\x37\x33\x38\x37\x31\x30\x38\x32\x30\x37\x38\x32\x32\x34\x37\x37\x35"
  "\x38\x34\x32\x35\x30\x39\x36\x37\x30\x36\x31\x38\x39\x31\x36\x38\x37\x30\x36\x32\x37\x38\x32\x31\x36\x33\x33\x33\x35\x32\x39\x39\x33\x37\x36\x31\x33\x38\x30\x37\x35\x31\x31\x34\x32\x30\x30\x38\x38\x36\x32\x34\x39\x39\x37\x39\x35\x30\x35\x32\x37\x39\x31"
  "\x30\x31\x38\x37\x30\x39\x36\x36\x33\x34\x36\x33\x39\x34\x34\x30\x31\x35\x36\x34\x34\x39\x30\x37\x32\x39\x37\x33\x31\x35\x36\x35\x39\x33\x35\x32\x34\x34\x31\x32\x33\x31\x37\x31\x35\x33\x39\x38\x31\x30\x32\x32\x31\x32\x31\x33\x32\x32\x31\x32\x30\x31\x38"
  "\x34\x37\x30\x30\x33\x35\x38\x30\x37\x36\x31\x36\x32\x36\x30\x31\x36\x33\x35\x36\x38\x36\x34\x35\x38\x31\x31\x33\x35\x38\x34\x38\x36\x38\x33\x31\x35\x32\x31\x35\x36\x33\x36\x38\x36\x39\x31\x39\x37\x36\x32\x34\x30\x33\x37\x30\x34\x32\x32\x36\x30\x31\x36"
  "\x39\x39\x38\x32\x39\x31\x30\x31\x35\x36\x32\x35\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x65\x2d\x31\x31\x30\x38";

  CHECK_EQ(4.4501477170144017780491e-308, StringToDouble(&uc, num, NO_FLAGS));

  // Changes the result of strtod (at least in glibc implementation).
  num[sizeof(num) - 8] = '\x31';

  CHECK_EQ(4.4501477170144022721148e-308, StringToDouble(&uc, num, NO_FLAGS));
}


TEST(MaximumExponent) {
  UnicodeCache uc;
  char num[] = "\x30\x2e\x31\x36\x65\x33\x30\x39";

  CHECK_EQ(1.59999999999999997765e+308, StringToDouble(&uc, num, NO_FLAGS));
}


TEST(ExponentNumberStr) {
  UnicodeCache uc;
  CHECK_EQ(1e1, StringToDouble(&uc, "\x31\x65\x31", NO_FLAGS));
  CHECK_EQ(1e1, StringToDouble(&uc, "\x31\x65\x2b\x31", NO_FLAGS));
  CHECK_EQ(1e-1, StringToDouble(&uc, "\x31\x65\x2d\x31", NO_FLAGS));
  CHECK_EQ(1e100, StringToDouble(&uc, "\x31\x65\x2b\x31\x30\x30", NO_FLAGS));
  CHECK_EQ(1e-100, StringToDouble(&uc, "\x31\x65\x2d\x31\x30\x30", NO_FLAGS));
  CHECK_EQ(1e-106, StringToDouble(&uc, "\x2e\x30\x30\x30\x30\x30\x31\x65\x2d\x31\x30\x30", NO_FLAGS));
}


class OneBit1: public BitField<uint32_t, 0, 1> {};
class OneBit2: public BitField<uint32_t, 7, 1> {};
class EightBit1: public BitField<uint32_t, 0, 8> {};
class EightBit2: public BitField<uint32_t, 13, 8> {};

TEST(BitField) {
  uint32_t x;

  // One bit bit field can hold values 0 and 1.
  CHECK(!OneBit1::is_valid(static_cast<uint32_t>(-1)));
  CHECK(!OneBit2::is_valid(static_cast<uint32_t>(-1)));
  for (int i = 0; i < 2; i++) {
    CHECK(OneBit1::is_valid(i));
    x = OneBit1::encode(i);
    CHECK_EQ(i, OneBit1::decode(x));

    CHECK(OneBit2::is_valid(i));
    x = OneBit2::encode(i);
    CHECK_EQ(i, OneBit2::decode(x));
  }
  CHECK(!OneBit1::is_valid(2));
  CHECK(!OneBit2::is_valid(2));

  // Eight bit bit field can hold values from 0 tp 255.
  CHECK(!EightBit1::is_valid(static_cast<uint32_t>(-1)));
  CHECK(!EightBit2::is_valid(static_cast<uint32_t>(-1)));
  for (int i = 0; i < 256; i++) {
    CHECK(EightBit1::is_valid(i));
    x = EightBit1::encode(i);
    CHECK_EQ(i, EightBit1::decode(x));
    CHECK(EightBit2::is_valid(i));
    x = EightBit2::encode(i);
    CHECK_EQ(i, EightBit2::decode(x));
  }
  CHECK(!EightBit1::is_valid(256));
  CHECK(!EightBit2::is_valid(256));
}


class UpperBits: public BitField64<int, 61, 3> {};
class MiddleBits: public BitField64<int, 31, 2> {};

TEST(BitField64) {
  uint64_t x;

  // Test most significant bits.
  x = V8_2PART_UINT64_C(0xE0000000, 00000000);
  CHECK(x == UpperBits::encode(7));
  CHECK_EQ(7, UpperBits::decode(x));

  // Test the 32/64-bit boundary bits.
  x = V8_2PART_UINT64_C(0x00000001, 80000000);
  CHECK(x == MiddleBits::encode(3));
  CHECK_EQ(3, MiddleBits::decode(x));
}
