// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <stdlib.h>

#include "src/v8.h"

#include "src/api.h"
#include "src/base/platform/platform.h"
#include "src/compilation-cache.h"
#include "src/debug.h"
#include "src/deoptimizer.h"
#include "src/isolate.h"
#include "src/stub-cache.h"
#include "test/cctest/cctest.h"

using ::v8::base::OS;
using ::v8::internal::Deoptimizer;
using ::v8::internal::EmbeddedVector;
using ::v8::internal::Handle;
using ::v8::internal::Isolate;
using ::v8::internal::JSFunction;
using ::v8::internal::Object;

// Size of temp buffer for formatting small strings.
#define SMALL_STRING_BUFFER_SIZE 80

// Utility class to set --allow-natives-syntax --always-opt and --nouse-inlining
// when constructed and return to their default state when destroyed.
class AlwaysOptimizeAllowNativesSyntaxNoInlining {
 public:
  AlwaysOptimizeAllowNativesSyntaxNoInlining()
      : always_opt_(i::FLAG_always_opt),
        allow_natives_syntax_(i::FLAG_allow_natives_syntax),
        use_inlining_(i::FLAG_use_inlining) {
    i::FLAG_always_opt = true;
    i::FLAG_allow_natives_syntax = true;
    i::FLAG_use_inlining = false;
  }

  ~AlwaysOptimizeAllowNativesSyntaxNoInlining() {
    i::FLAG_allow_natives_syntax = allow_natives_syntax_;
    i::FLAG_always_opt = always_opt_;
    i::FLAG_use_inlining = use_inlining_;
  }

 private:
  bool always_opt_;
  bool allow_natives_syntax_;
  bool use_inlining_;
};


// Utility class to set --allow-natives-syntax and --nouse-inlining when
// constructed and return to their default state when destroyed.
class AllowNativesSyntaxNoInlining {
 public:
  AllowNativesSyntaxNoInlining()
      : allow_natives_syntax_(i::FLAG_allow_natives_syntax),
        use_inlining_(i::FLAG_use_inlining) {
    i::FLAG_allow_natives_syntax = true;
    i::FLAG_use_inlining = false;
  }

  ~AllowNativesSyntaxNoInlining() {
    i::FLAG_allow_natives_syntax = allow_natives_syntax_;
    i::FLAG_use_inlining = use_inlining_;
  }

 private:
  bool allow_natives_syntax_;
  bool use_inlining_;
};


// Abort any ongoing incremental marking to make sure that all weak global
// handle callbacks are processed.
static void NonIncrementalGC() {
  CcTest::heap()->CollectAllGarbage(i::Heap::kAbortIncrementalMarkingMask);
}


static Handle<JSFunction> GetJSFunction(v8::Handle<v8::Object> obj,
                                        const char* property_name) {
  v8::Local<v8::Function> fun =
      v8::Local<v8::Function>::Cast(obj->Get(v8_str(property_name)));
  return v8::Utils::OpenHandle(*fun);
}


TEST(DeoptimizeSimple) {
  i::FLAG_turbo_deoptimization = true;

  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  // Test lazy deoptimization of a simple function.
  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x68\x28\x29\x20\x7b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x68\x28\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x29\x20\x7b\x20\x67\x28\x29\x3b\x20\x7d\x3b"
        "\x66\x28\x29\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK(!GetJSFunction(env->Global(), "\x66")->IsOptimized());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));

  // Test lazy deoptimization of a simple function. Call the function after the
  // deoptimization while it is still activated further down the stack.
  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x66\x28\x66\x61\x6c\x73\x65\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x29\x20\x7b\x20\x69\x66\x20\x28\x78\x29\x20\x7b\x20\x67\x28\x29\x3b\x20\x7d\x20\x65\x6c\x73\x65\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x7d\x20\x7d\x3b"
        "\x66\x28\x74\x72\x75\x65\x29\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK(!GetJSFunction(env->Global(), "\x66")->IsOptimized());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeSimpleWithArguments) {
  i::FLAG_turbo_deoptimization = true;

  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  // Test lazy deoptimization of a simple function with some arguments.
  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x68\x28\x78\x29\x20\x7b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x68\x28\x78\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x2c\x20\x79\x2c\x20\x7a\x29\x20\x7b\x20\x67\x28\x31\x2c\x78\x29\x3b\x20\x79\x2b\x7a\x3b\x20\x7d\x3b"
        "\x66\x28\x31\x2c\x20\x22\x32\x22\x2c\x20\x66\x61\x6c\x73\x65\x29\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK(!GetJSFunction(env->Global(), "\x66")->IsOptimized());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));

  // Test lazy deoptimization of a simple function with some arguments. Call the
  // function after the deoptimization while it is still activated further down
  // the stack.
  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x66\x28\x66\x61\x6c\x73\x65\x2c\x20\x31\x2c\x20\x79\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x2c\x20\x79\x2c\x20\x7a\x29\x20\x7b\x20\x69\x66\x20\x28\x78\x29\x20\x7b\x20\x67\x28\x78\x2c\x20\x79\x29\x3b\x20\x7d\x20\x65\x6c\x73\x65\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x79\x20\x2b\x20\x7a\x3b\x20\x7d\x20\x7d\x3b"
        "\x66\x28\x74\x72\x75\x65\x2c\x20\x31\x2c\x20\x22\x32\x22\x29\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK(!GetJSFunction(env->Global(), "\x66")->IsOptimized());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeSimpleNested) {
  i::FLAG_turbo_deoptimization = true;

  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  // Test lazy deoptimization of a simple function. Have a nested function call
  // do the deoptimization.
  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x68\x28\x78\x2c\x20\x79\x2c\x20\x7a\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x20\x2b\x20\x79\x20\x2b\x20\x7a\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x7a\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x72\x65\x74\x75\x72\x6e\x20\x7a\x3b\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x2c\x79\x2c\x7a\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x68\x28\x78\x2c\x20\x79\x2c\x20\x67\x28\x7a\x29\x29\x3b\x20\x7d\x3b"
        "\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x66\x28\x31\x2c\x20\x32\x2c\x20\x33\x29\x3b");
    NonIncrementalGC();

    CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
    CHECK_EQ(6, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
    CHECK(!GetJSFunction(env->Global(), "\x66")->IsOptimized());
    CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
  }
}


TEST(DeoptimizeRecursive) {
  i::FLAG_turbo_deoptimization = true;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  {
    // Test lazy deoptimization of a simple function called recursively. Call
    // the function recursively a number of times before deoptimizing it.
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x76\x61\x72\x20\x63\x61\x6c\x6c\x73\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x29\x20\x7b\x20\x63\x61\x6c\x6c\x73\x2b\x2b\x3b\x20\x69\x66\x20\x28\x78\x20\x3e\x20\x30\x29\x20\x7b\x20\x66\x28\x78\x20\x2d\x20\x31\x29\x3b\x20\x7d\x20\x65\x6c\x73\x65\x20\x7b\x20\x67\x28\x29\x3b\x20\x7d\x20\x7d\x3b"
        "\x66\x28\x31\x30\x29\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(11, env->Global()->Get(v8_str("\x63\x61\x6c\x6c\x73"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));

  v8::Local<v8::Function> fun = v8::Local<v8::Function>::Cast(
      env->Global()->Get(v8::String::NewFromUtf8(CcTest::isolate(), "\x66")));
  CHECK(!fun.IsEmpty());
}


TEST(DeoptimizeMultiple) {
  i::FLAG_turbo_deoptimization = true;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x31\x29\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x32\x29\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x33\x29\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x34\x29\x3b\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x34\x28\x78\x29\x20\x7b\x20\x67\x28\x29\x3b\x20\x7d\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x33\x28\x78\x2c\x20\x79\x2c\x20\x7a\x29\x20\x7b\x20\x66\x34\x28\x29\x3b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x20\x2b\x20\x79\x20\x2b\x20\x7a\x3b\x20\x7d\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x32\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x20\x2b\x20\x66\x33\x28\x79\x20\x2b\x20\x31\x2c\x20\x79\x20\x2b\x20\x31\x2c\x20\x79\x20\x2b\x20\x31\x29\x20\x2b\x20\x79\x3b\x20\x7d\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x31\x28\x78\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x66\x32\x28\x78\x20\x2b\x20\x31\x2c\x20\x78\x20\x2b\x20\x31\x29\x20\x2b\x20\x78\x3b\x20\x7d\x3b"
        "\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x66\x31\x28\x31\x29\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(14, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeConstructor) {
  i::FLAG_turbo_deoptimization = true;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x29\x20\x7b\x20\x20\x67\x28\x29\x3b\x20\x7d\x3b"
        "\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x6e\x65\x77\x20\x66\x28\x29\x20\x69\x6e\x73\x74\x61\x6e\x63\x65\x6f\x66\x20\x66\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK(env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->IsTrue());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));

  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x74\x68\x69\x73\x2e\x78\x20\x3d\x20\x78\x3b\x20\x67\x28\x29\x3b\x20\x74\x68\x69\x73\x2e\x79\x20\x3d\x20\x79\x3b\x20\x7d\x3b"
        "\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x6e\x65\x77\x20\x66\x28\x31\x2c\x20\x32\x29\x3b"
        "\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x72\x65\x73\x75\x6c\x74\x2e\x78\x20\x2b\x20\x72\x65\x73\x75\x6c\x74\x2e\x79\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(3, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeConstructorMultiple) {
  i::FLAG_turbo_deoptimization = true;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  {
    AlwaysOptimizeAllowNativesSyntaxNoInlining options;
    CompileRun(
        "\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
        "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x28\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x31\x29\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x32\x29\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x33\x29\x3b"
        "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x34\x29\x3b\x7d"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x34\x28\x78\x29\x20\x7b\x20\x74\x68\x69\x73\x2e\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x78\x3b\x20\x67\x28\x29\x3b\x20\x7d\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x33\x28\x78\x2c\x20\x79\x2c\x20\x7a\x29\x20\x7b\x20\x74\x68\x69\x73\x2e\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x6e\x65\x77\x20\x66\x34\x28\x78\x20\x2b\x20\x79\x20\x2b\x20\x7a\x29\x2e\x72\x65\x73\x75\x6c\x74\x3b\x20\x7d\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x32\x28\x78\x2c\x20\x79\x29\x20\x7b"
        "\x20\x20\x20\x20\x74\x68\x69\x73\x2e\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x78\x20\x2b\x20\x6e\x65\x77\x20\x66\x33\x28\x79\x20\x2b\x20\x31\x2c\x20\x79\x20\x2b\x20\x31\x2c\x20\x79\x20\x2b\x20\x31\x29\x2e\x72\x65\x73\x75\x6c\x74\x20\x2b\x20\x79\x3b\x20\x7d\x3b"
        "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x31\x28\x78\x29\x20\x7b\x20\x74\x68\x69\x73\x2e\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x6e\x65\x77\x20\x66\x32\x28\x78\x20\x2b\x20\x31\x2c\x20\x78\x20\x2b\x20\x31\x29\x2e\x72\x65\x73\x75\x6c\x74\x20\x2b\x20\x78\x3b\x20\x7d\x3b"
        "\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x6e\x65\x77\x20\x66\x31\x28\x31\x29\x2e\x72\x65\x73\x75\x6c\x74\x3b");
  }
  NonIncrementalGC();

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(14, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeBinaryOperationADDString) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  AllowNativesSyntaxNoInlining options;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  const char* f_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x20\x2b\x20\x79\x3b\x20\x7d\x3b";

  {
    // Compile function f and collect to type feedback to insert binary op stub
    // call in the optimized code.
    i::FLAG_prepare_always_opt = true;
    CompileRun("\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
               "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
               "\x76\x61\x72\x20\x64\x65\x6f\x70\x74\x20\x3d\x20\x66\x61\x6c\x73\x65\x3b"
               "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x58\x28\x29\x20\x7b\x20\x7d\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x74\x6f\x53\x74\x72\x69\x6e\x67\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x69\x66\x20\x28\x64\x65\x6f\x70\x74\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x7d\x20\x72\x65\x74\x75\x72\x6e\x20\x27\x61\x6e\x20\x58\x27"
               "\x7d\x3b");
    CompileRun(f_source);
    CompileRun("\x66\x6f\x72\x20\x28\x76\x61\x72\x20\x69\x20\x3d\x20\x30\x3b\x20\x69\x20\x3c\x20\x35\x3b\x20\x69\x2b\x2b\x29\x20\x7b"
               "\x20\x20\x66\x28\x27\x61\x2b\x27\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
               "\x7d\x3b");

    // Compile an optimized version of f.
    i::FLAG_always_opt = true;
    CompileRun(f_source);
    CompileRun("\x66\x28\x27\x61\x2b\x27\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
    CHECK(!CcTest::i_isolate()->use_crankshaft() ||
          GetJSFunction(env->Global(), "\x66")->IsOptimized());

    // Call f and force deoptimization while processing the binary operation.
    CompileRun("\x64\x65\x6f\x70\x74\x20\x3d\x20\x74\x72\x75\x65\x3b"
               "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x66\x28\x27\x61\x2b\x27\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
  }
  NonIncrementalGC();

  CHECK(!GetJSFunction(env->Global(), "\x66")->IsOptimized());
  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  v8::Handle<v8::Value> result = env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"));
  CHECK(result->IsString());
  v8::String::Utf8Value utf8(result);
  CHECK_EQ("\x61\x2b\x61\x6e\x20\x58", *utf8);
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


static void CompileConstructorWithDeoptimizingValueOf() {
  CompileRun("\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
             "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
             "\x76\x61\x72\x20\x64\x65\x6f\x70\x74\x20\x3d\x20\x66\x61\x6c\x73\x65\x3b"
             "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x58\x28\x29\x20\x7b\x20\x7d\x3b"
             "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x76\x61\x6c\x75\x65\x4f\x66\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
             "\x20\x20\x69\x66\x20\x28\x64\x65\x6f\x70\x74\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x7d\x20\x72\x65\x74\x75\x72\x6e\x20\x38"
             "\x7d\x3b");
}


static void TestDeoptimizeBinaryOpHelper(LocalContext* env,
                                         const char* binary_op) {
  EmbeddedVector<char, SMALL_STRING_BUFFER_SIZE> f_source_buffer;
  SNPrintF(f_source_buffer,
           "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x20\x6c\xa2\x20\x79\x3b\x20\x7d\x3b",
           binary_op);
  char* f_source = f_source_buffer.start();

  AllowNativesSyntaxNoInlining options;
  // Compile function f and collect to type feedback to insert binary op stub
  // call in the optimized code.
  i::FLAG_prepare_always_opt = true;
  CompileConstructorWithDeoptimizingValueOf();
  CompileRun(f_source);
  CompileRun("\x66\x6f\x72\x20\x28\x76\x61\x72\x20\x69\x20\x3d\x20\x30\x3b\x20\x69\x20\x3c\x20\x35\x3b\x20\x69\x2b\x2b\x29\x20\x7b"
             "\x20\x20\x66\x28\x38\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
             "\x7d\x3b");

  // Compile an optimized version of f.
  i::FLAG_always_opt = true;
  CompileRun(f_source);
  CompileRun("\x66\x28\x37\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
  CHECK(!CcTest::i_isolate()->use_crankshaft() ||
        GetJSFunction((*env)->Global(), "\x66")->IsOptimized());

  // Call f and force deoptimization while processing the binary operation.
  CompileRun("\x64\x65\x6f\x70\x74\x20\x3d\x20\x74\x72\x75\x65\x3b"
             "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x66\x28\x37\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
  NonIncrementalGC();
  CHECK(!GetJSFunction((*env)->Global(), "\x66")->IsOptimized());
}


TEST(DeoptimizeBinaryOperationADD) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  TestDeoptimizeBinaryOpHelper(&env, "\x2b");

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(15, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeBinaryOperationSUB) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  TestDeoptimizeBinaryOpHelper(&env, "\x2d");

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(-1, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeBinaryOperationMUL) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  TestDeoptimizeBinaryOpHelper(&env, "\x2a");

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(56, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeBinaryOperationDIV) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  TestDeoptimizeBinaryOpHelper(&env, "\x2f");

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(0, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeBinaryOperationMOD) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  TestDeoptimizeBinaryOpHelper(&env, "\x25");

  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(7, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeCompare) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  const char* f_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x20\x3c\x20\x79\x3b\x20\x7d\x3b";

  {
    AllowNativesSyntaxNoInlining options;
    // Compile function f and collect to type feedback to insert compare ic
    // call in the optimized code.
    i::FLAG_prepare_always_opt = true;
    CompileRun("\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
               "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
               "\x76\x61\x72\x20\x64\x65\x6f\x70\x74\x20\x3d\x20\x66\x61\x6c\x73\x65\x3b"
               "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x58\x28\x29\x20\x7b\x20\x7d\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x74\x6f\x53\x74\x72\x69\x6e\x67\x20\x3d\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x69\x66\x20\x28\x64\x65\x6f\x70\x74\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x29\x3b\x20\x7d\x20\x72\x65\x74\x75\x72\x6e\x20\x27\x62\x27"
               "\x7d\x3b");
    CompileRun(f_source);
    CompileRun("\x66\x6f\x72\x20\x28\x76\x61\x72\x20\x69\x20\x3d\x20\x30\x3b\x20\x69\x20\x3c\x20\x35\x3b\x20\x69\x2b\x2b\x29\x20\x7b"
               "\x20\x20\x66\x28\x27\x61\x27\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
               "\x7d\x3b");

    // Compile an optimized version of f.
    i::FLAG_always_opt = true;
    CompileRun(f_source);
    CompileRun("\x66\x28\x27\x61\x27\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
    CHECK(!CcTest::i_isolate()->use_crankshaft() ||
          GetJSFunction(env->Global(), "\x66")->IsOptimized());

    // Call f and force deoptimization while processing the comparison.
    CompileRun("\x64\x65\x6f\x70\x74\x20\x3d\x20\x74\x72\x75\x65\x3b"
               "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x66\x28\x27\x61\x27\x2c\x20\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
  }
  NonIncrementalGC();

  CHECK(!GetJSFunction(env->Global(), "\x66")->IsOptimized());
  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(true, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->BooleanValue());
  CHECK_EQ(0, Deoptimizer::GetDeoptimizedCodeCount(CcTest::i_isolate()));
}


TEST(DeoptimizeLoadICStoreIC) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  // Functions to generate load/store/keyed load/keyed store IC calls.
  const char* f1_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x31\x28\x78\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x2e\x79\x3b\x20\x7d\x3b";
  const char* g1_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x31\x28\x78\x29\x20\x7b\x20\x78\x2e\x79\x20\x3d\x20\x31\x3b\x20\x7d\x3b";
  const char* f2_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x32\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x5b\x79\x5d\x3b\x20\x7d\x3b";
  const char* g2_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x32\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x78\x5b\x79\x5d\x20\x3d\x20\x31\x3b\x20\x7d\x3b";

  {
    AllowNativesSyntaxNoInlining options;
    // Compile functions and collect to type feedback to insert ic
    // calls in the optimized code.
    i::FLAG_prepare_always_opt = true;
    CompileRun("\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
               "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
               "\x76\x61\x72\x20\x64\x65\x6f\x70\x74\x20\x3d\x20\x66\x61\x6c\x73\x65\x3b"
               "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x58\x28\x29\x20\x7b\x20\x7d\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x5f\x5f\x64\x65\x66\x69\x6e\x65\x47\x65\x74\x74\x65\x72\x5f\x5f\x28\x27\x79\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x69\x66\x20\x28\x64\x65\x6f\x70\x74\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x31\x29\x3b\x20\x7d\x3b"
               "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x33\x3b"
               "\x7d\x29\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x5f\x5f\x64\x65\x66\x69\x6e\x65\x53\x65\x74\x74\x65\x72\x5f\x5f\x28\x27\x79\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x69\x66\x20\x28\x64\x65\x6f\x70\x74\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x67\x31\x29\x3b\x20\x7d\x3b"
               "\x7d\x29\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x5f\x5f\x64\x65\x66\x69\x6e\x65\x47\x65\x74\x74\x65\x72\x5f\x5f\x28\x27\x7a\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x69\x66\x20\x28\x64\x65\x6f\x70\x74\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x32\x29\x3b\x20\x7d\x3b"
               "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x33\x3b"
               "\x7d\x29\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x5f\x5f\x64\x65\x66\x69\x6e\x65\x53\x65\x74\x74\x65\x72\x5f\x5f\x28\x27\x7a\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x69\x66\x20\x28\x64\x65\x6f\x70\x74\x29\x20\x7b\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x67\x32\x29\x3b\x20\x7d\x3b"
               "\x7d\x29\x3b");
    CompileRun(f1_source);
    CompileRun(g1_source);
    CompileRun(f2_source);
    CompileRun(g2_source);
    CompileRun("\x66\x6f\x72\x20\x28\x76\x61\x72\x20\x69\x20\x3d\x20\x30\x3b\x20\x69\x20\x3c\x20\x35\x3b\x20\x69\x2b\x2b\x29\x20\x7b"
               "\x20\x20\x66\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
               "\x20\x20\x67\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
               "\x20\x20\x66\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b"
               "\x20\x20\x67\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b"
               "\x7d\x3b");

    // Compile an optimized version of the functions.
    i::FLAG_always_opt = true;
    CompileRun(f1_source);
    CompileRun(g1_source);
    CompileRun(f2_source);
    CompileRun(g2_source);
    CompileRun("\x66\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
    CompileRun("\x67\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
    CompileRun("\x66\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b");
    CompileRun("\x67\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b");
    if (CcTest::i_isolate()->use_crankshaft()) {
      CHECK(GetJSFunction(env->Global(), "\x66\x31")->IsOptimized());
      CHECK(GetJSFunction(env->Global(), "\x67\x31")->IsOptimized());
      CHECK(GetJSFunction(env->Global(), "\x66\x32")->IsOptimized());
      CHECK(GetJSFunction(env->Global(), "\x67\x32")->IsOptimized());
    }

    // Call functions and force deoptimization while processing the ics.
    CompileRun("\x64\x65\x6f\x70\x74\x20\x3d\x20\x74\x72\x75\x65\x3b"
               "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x66\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
               "\x67\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
               "\x66\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b"
               "\x67\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b");
  }
  NonIncrementalGC();

  CHECK(!GetJSFunction(env->Global(), "\x66\x31")->IsOptimized());
  CHECK(!GetJSFunction(env->Global(), "\x67\x31")->IsOptimized());
  CHECK(!GetJSFunction(env->Global(), "\x66\x32")->IsOptimized());
  CHECK(!GetJSFunction(env->Global(), "\x67\x32")->IsOptimized());
  CHECK_EQ(4, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(13, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
}


TEST(DeoptimizeLoadICStoreICNested) {
  i::FLAG_turbo_deoptimization = true;
  i::FLAG_concurrent_recompilation = false;
  LocalContext env;
  v8::HandleScope scope(env->GetIsolate());

  // Functions to generate load/store/keyed load/keyed store IC calls.
  const char* f1_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x31\x28\x78\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x2e\x79\x3b\x20\x7d\x3b";
  const char* g1_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x31\x28\x78\x29\x20\x7b\x20\x78\x2e\x79\x20\x3d\x20\x31\x3b\x20\x7d\x3b";
  const char* f2_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x66\x32\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x72\x65\x74\x75\x72\x6e\x20\x78\x5b\x79\x5d\x3b\x20\x7d\x3b";
  const char* g2_source = "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x67\x32\x28\x78\x2c\x20\x79\x29\x20\x7b\x20\x78\x5b\x79\x5d\x20\x3d\x20\x31\x3b\x20\x7d\x3b";

  {
    AllowNativesSyntaxNoInlining options;
    // Compile functions and collect to type feedback to insert ic
    // calls in the optimized code.
    i::FLAG_prepare_always_opt = true;
    CompileRun("\x76\x61\x72\x20\x63\x6f\x75\x6e\x74\x20\x3d\x20\x30\x3b"
               "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x30\x3b"
               "\x76\x61\x72\x20\x64\x65\x6f\x70\x74\x20\x3d\x20\x66\x61\x6c\x73\x65\x3b"
               "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x58\x28\x29\x20\x7b\x20\x7d\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x5f\x5f\x64\x65\x66\x69\x6e\x65\x47\x65\x74\x74\x65\x72\x5f\x5f\x28\x27\x79\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x67\x31\x28\x74\x68\x69\x73\x29\x3b"
               "\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x31\x33\x3b"
               "\x7d\x29\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x5f\x5f\x64\x65\x66\x69\x6e\x65\x53\x65\x74\x74\x65\x72\x5f\x5f\x28\x27\x79\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x66\x32\x28\x74\x68\x69\x73\x2c\x20\x27\x7a\x27\x29\x3b"
               "\x7d\x29\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x5f\x5f\x64\x65\x66\x69\x6e\x65\x47\x65\x74\x74\x65\x72\x5f\x5f\x28\x27\x7a\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x67\x32\x28\x74\x68\x69\x73\x2c\x20\x27\x7a\x27\x29\x3b"
               "\x7d\x29\x3b"
               "\x58\x2e\x70\x72\x6f\x74\x6f\x74\x79\x70\x65\x2e\x5f\x5f\x64\x65\x66\x69\x6e\x65\x53\x65\x74\x74\x65\x72\x5f\x5f\x28\x27\x7a\x27\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20\x7b"
               "\x20\x20\x69\x66\x20\x28\x64\x65\x6f\x70\x74\x29\x20\x7b"
               "\x20\x20\x20\x20\x63\x6f\x75\x6e\x74\x2b\x2b\x3b"
               "\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x31\x29\x3b"
               "\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x67\x31\x29\x3b"
               "\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x66\x32\x29\x3b"
               "\x20\x20\x20\x20\x25\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x67\x32\x29\x3b\x20\x7d\x3b"
               "\x7d\x29\x3b");
    CompileRun(f1_source);
    CompileRun(g1_source);
    CompileRun(f2_source);
    CompileRun(g2_source);
    CompileRun("\x66\x6f\x72\x20\x28\x76\x61\x72\x20\x69\x20\x3d\x20\x30\x3b\x20\x69\x20\x3c\x20\x35\x3b\x20\x69\x2b\x2b\x29\x20\x7b"
               "\x20\x20\x66\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
               "\x20\x20\x67\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b"
               "\x20\x20\x66\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b"
               "\x20\x20\x67\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b"
               "\x7d\x3b");

    // Compile an optimized version of the functions.
    i::FLAG_always_opt = true;
    CompileRun(f1_source);
    CompileRun(g1_source);
    CompileRun(f2_source);
    CompileRun(g2_source);
    CompileRun("\x66\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
    CompileRun("\x67\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
    CompileRun("\x66\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b");
    CompileRun("\x67\x32\x28\x6e\x65\x77\x20\x58\x28\x29\x2c\x20\x27\x7a\x27\x29\x3b");
    if (CcTest::i_isolate()->use_crankshaft()) {
      CHECK(GetJSFunction(env->Global(), "\x66\x31")->IsOptimized());
      CHECK(GetJSFunction(env->Global(), "\x67\x31")->IsOptimized());
      CHECK(GetJSFunction(env->Global(), "\x66\x32")->IsOptimized());
      CHECK(GetJSFunction(env->Global(), "\x67\x32")->IsOptimized());
    }

    // Call functions and force deoptimization while processing the ics.
    CompileRun("\x64\x65\x6f\x70\x74\x20\x3d\x20\x74\x72\x75\x65\x3b"
               "\x76\x61\x72\x20\x72\x65\x73\x75\x6c\x74\x20\x3d\x20\x66\x31\x28\x6e\x65\x77\x20\x58\x28\x29\x29\x3b");
  }
  NonIncrementalGC();

  CHECK(!GetJSFunction(env->Global(), "\x66\x31")->IsOptimized());
  CHECK(!GetJSFunction(env->Global(), "\x67\x31")->IsOptimized());
  CHECK(!GetJSFunction(env->Global(), "\x66\x32")->IsOptimized());
  CHECK(!GetJSFunction(env->Global(), "\x67\x32")->IsOptimized());
  CHECK_EQ(1, env->Global()->Get(v8_str("\x63\x6f\x75\x6e\x74"))->Int32Value());
  CHECK_EQ(13, env->Global()->Get(v8_str("\x72\x65\x73\x75\x6c\x74"))->Int32Value());
}
