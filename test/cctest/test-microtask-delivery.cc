// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "src/v8.h"

#include "test/cctest/cctest.h"

using namespace v8;
namespace i = v8::internal;

namespace {
class HarmonyIsolate {
 public:
  HarmonyIsolate() {
    isolate_ = Isolate::New();
    isolate_->Enter();
  }

  ~HarmonyIsolate() {
    isolate_->Exit();
    isolate_->Dispose();
  }

  Isolate* GetIsolate() const { return isolate_; }

 private:
  Isolate* isolate_;
};
}


TEST(MicrotaskDeliverySimple) {
  HarmonyIsolate isolate;
  HandleScope scope(isolate.GetIsolate());
  LocalContext context(isolate.GetIsolate());
  CompileRun(
      "\x76\x61\x72\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x20\x3d\x20\x5b\x5d\x3b"
      "\x76\x61\x72\x20\x72\x65\x73\x6f\x6c\x76\x65\x72\x20\x3d\x20\x7b\x7d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x68\x61\x6e\x64\x6c\x65\x72\x28\x72\x65\x73\x6f\x6c\x76\x65\x29\x20\x7b\x20\x72\x65\x73\x6f\x6c\x76\x65\x72\x2e\x72\x65\x73\x6f\x6c\x76\x65\x20\x3d\x20\x72\x65\x73\x6f\x6c\x76\x65\x3b\x20\x7d"
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x7d\x3b"
      "\x76\x61\x72\x20\x6f\x62\x73\x65\x72\x76\x65\x4f\x72\x64\x65\x72\x73\x20\x3d\x20\x5b\x31\x2c\x20\x34\x5d\x3b"
      "\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x28\x29\x20\x7b"
        "\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x6f\x62\x73\x65\x72\x76\x65\x4f\x72\x64\x65\x72\x73\x2e\x73\x68\x69\x66\x74\x28\x29\x29\x3b"
        "\x72\x65\x73\x6f\x6c\x76\x65\x72\x2e\x72\x65\x73\x6f\x6c\x76\x65\x28\x29\x3b"
      "\x7d"
      "\x76\x61\x72\x20\x70\x20\x3d\x20\x6e\x65\x77\x20\x50\x72\x6f\x6d\x69\x73\x65\x28\x68\x61\x6e\x64\x6c\x65\x72\x29\x3b"
      "\x70\x2e\x74\x68\x65\x6e\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b"
        "\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x32\x29\x3b"
      "\x7d\x29\x2e\x74\x68\x65\x6e\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b"
        "\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x33\x29\x3b"
        "\x6f\x62\x6a\x2e\x69\x64\x2b\x2b\x3b"
        "\x72\x65\x74\x75\x72\x6e\x20\x6e\x65\x77\x20\x50\x72\x6f\x6d\x69\x73\x65\x28\x68\x61\x6e\x64\x6c\x65\x72\x29\x3b"
      "\x7d\x29\x2e\x74\x68\x65\x6e\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b"
        "\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x35\x29\x3b"
      "\x7d\x29\x2e\x74\x68\x65\x6e\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b"
        "\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x70\x75\x73\x68\x28\x36\x29\x3b"
      "\x7d\x29\x3b"
      "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x6f\x62\x6a\x2c\x20\x6f\x62\x73\x65\x72\x76\x65\x72\x29\x3b"
      "\x6f\x62\x6a\x2e\x69\x64\x20\x3d\x20\x31\x3b");
  CHECK_EQ(6, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x2e\x6c\x65\x6e\x67\x74\x68")->Int32Value());
  CHECK_EQ(1, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x30\x5d")->Int32Value());
  CHECK_EQ(2, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x31\x5d")->Int32Value());
  CHECK_EQ(3, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x32\x5d")->Int32Value());
  CHECK_EQ(4, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x33\x5d")->Int32Value());
  CHECK_EQ(5, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x34\x5d")->Int32Value());
  CHECK_EQ(6, CompileRun("\x6f\x72\x64\x65\x72\x69\x6e\x67\x5b\x35\x5d")->Int32Value());
}


TEST(MicrotaskPerIsolateState) {
  HarmonyIsolate isolate;
  HandleScope scope(isolate.GetIsolate());
  LocalContext context1(isolate.GetIsolate());
  isolate.GetIsolate()->SetAutorunMicrotasks(false);
  CompileRun(
      "\x76\x61\x72\x20\x6f\x62\x6a\x20\x3d\x20\x7b\x20\x63\x61\x6c\x6c\x73\x3a\x20\x30\x20\x7d\x3b");
  Handle<Value> obj = CompileRun("\x6f\x62\x6a");
  {
    LocalContext context2(isolate.GetIsolate());
    context2->Global()->Set(String::NewFromUtf8(isolate.GetIsolate(), "\x6f\x62\x6a"),
                            obj);
    CompileRun(
        "\x76\x61\x72\x20\x72\x65\x73\x6f\x6c\x76\x65\x72\x20\x3d\x20\x7b\x7d\x3b"
        "\x6e\x65\x77\x20\x50\x72\x6f\x6d\x69\x73\x65\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x72\x65\x73\x6f\x6c\x76\x65\x29\x20\x7b"
          "\x72\x65\x73\x6f\x6c\x76\x65\x72\x2e\x72\x65\x73\x6f\x6c\x76\x65\x20\x3d\x20\x72\x65\x73\x6f\x6c\x76\x65\x3b"
        "\x7d\x29\x2e\x74\x68\x65\x6e\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b"
          "\x6f\x62\x6a\x2e\x63\x61\x6c\x6c\x73\x2b\x2b\x3b"
        "\x7d\x29\x3b"
        "\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b"
          "\x72\x65\x73\x6f\x6c\x76\x65\x72\x2e\x72\x65\x73\x6f\x6c\x76\x65\x28\x29\x3b"
        "\x7d\x29\x28\x29\x3b");
  }
  {
    LocalContext context3(isolate.GetIsolate());
    context3->Global()->Set(String::NewFromUtf8(isolate.GetIsolate(), "\x6f\x62\x6a"),
                            obj);
    CompileRun(
        "\x76\x61\x72\x20\x66\x6f\x6f\x20\x3d\x20\x7b\x20\x69\x64\x3a\x20\x31\x20\x7d\x3b"
        "\x4f\x62\x6a\x65\x63\x74\x2e\x6f\x62\x73\x65\x72\x76\x65\x28\x66\x6f\x6f\x2c\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x28\x29\x20\x7b"
          "\x6f\x62\x6a\x2e\x63\x61\x6c\x6c\x73\x2b\x2b\x3b"
        "\x7d\x29\x3b"
        "\x66\x6f\x6f\x2e\x69\x64\x2b\x2b\x3b");
  }
  {
    LocalContext context4(isolate.GetIsolate());
    context4->Global()->Set(String::NewFromUtf8(isolate.GetIsolate(), "\x6f\x62\x6a"),
                            obj);
    isolate.GetIsolate()->RunMicrotasks();
    CHECK_EQ(2, CompileRun("\x6f\x62\x6a\x2e\x63\x61\x6c\x6c\x73")->Int32Value());
  }
}
